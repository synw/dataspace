{"load_dataset": "return dataspace.from_df([1])", "show": "ds = await load_dataset(\"bitcoin\")\nds.show()", "cols_": "ds = await load_dataset(\"sp500\")\nds.cols_()", "count_null_": "data = {\"col1\": [1, np.nan, 2, None, 3, 3]}\ndf = pd.DataFrame(data)\nds = dataspace.from_df(df)\nn = ds.count_null_(\"col1\")\nprint(\"The column has\", n, \"nulls\")\nds.show()", "count_empty_": "data = {\"col1\": [\"foo\", \"\", \"bar\", \"\"]}\ndf = pd.DataFrame(data)\nds = dataspace.from_df(df)\nn = ds.count_empty_(\"col1\")\nprint(\"The column has\", n, \"empty values\")\nds.show()", "count_zero_": "data = {\"col1\": [0, 1, 2, 0, 3, 3]}\ndf = pd.DataFrame(data)\nds = dataspace.from_df(df)\nn = ds.count_zero_(\"col1\")\nprint(\"The column has\", n, \"zero values\")\nds.show()", "count_unique_": "data = {\"col1\": [1, 2, 2, 3, 3, 3]}\ndf = pd.DataFrame(data)\nds = dataspace.from_df(df)\nn = ds.count_unique_(\"col1\")\nprint(\"The column has\", n, \"unique values\")\nds.show()", "wunique_": "data = {\"col1\": [\"one\", \"two\", \"two\", \"three\", \"three\", \"three\"]}\ndf = pd.DataFrame(data)\nds = dataspace.from_df(df)\ndf = ds.wunique_(\"col1\")\nprint(\"Dataframe of unique values weights:\")\nprint(df)", "limit": "df = pd.DataFrame(np.linspace(1, 100, 1000))\nds = dataspace.from_df(df)\nprint(\"Initial length:\", len(ds.df.index))\nds.limit(10)\nprint(\"New length after limiting:\", len(ds.df.index))\nds.show()", "unique_": "data = {\"col1\": [\"A\", \"B\", \"C\", \"A\", \"B\"]}\ndf = pd.DataFrame(data)\nds = dataspace.from_df(df)\nuv = ds.unique_(\"col1\")\nprint(\"Colum unique values:\", uv)\nds.show()", "drop_nan": "data = {\"col1\": [14, 8, np.nan], \"col2\": [2, np.nan, np.nan]}\ndf = pd.DataFrame(data)\nds = dataspace.from_df(df)\nprint(\"The col1 has\", ds.count_null_(\"col1\"), \"nulls\")\nds.drop_nan(\"col1\")\nds.show()", "fill_nan": "data = {\"col1\": [14, 8, np.nan], \"col2\": [2, np.nan, np.nan]}\ndf = pd.DataFrame(data)\nds = dataspace.from_df(df)\nds.count_null_(\"col1\")\nds.fill_nan(\"val\", \"col1\")\nds.show()", "fill_nulls": "data = {\"col1\": np.array([1, None, \"\"]), \"col2\": np.array([None, 0, None])}\ndf = pd.DataFrame(data)\nds = dataspace.from_df(df)\nds.count_empty_(\"col1\")\nds.count_null_(\"col1\")\nds.fill_nulls()\nds.show()", "fdate": "ds = await load_dataset(\"timeserie\")\nprint(ds.df.head())\nds.fdate(\"date\", precision=\"D\")\nds.show()", "to_date": "ds = await load_dataset(\"bitcoin\")\nprint(\"1. Initial dataframe:\")\nprint(ds.df.head(1))\nprint(\"2. Colums:\")\nprint(ds.cols_())\nds.to_date(\"ReceiptTS\")\nprint(\"3. New column types:\", ds.cols_())\nds.show()", "timestamps": "ds = await load_dataset(\"timeserie\")\nprint(ds.df.head())\nds.timestamps(\"date\")\nds.show()", "to_int": "data = {\"col1\": [\"5\", \"8\", \"3\"], \"col2\": [\"8\", \"7\", \"2\"]}\ndf = pd.DataFrame(data)\nds = dataspace.from_df(df)\nprint(\"Column types:\", ds.cols_())\nds.to_int(\"col1\", \"col2\")\nprint(\"Column types after convert:\", ds.cols_())\nds.show()", "to_float": "data = {\"col1\": [\"0.25\", \"0.85\", \"0.58\"]}\ndf = pd.DataFrame(data)\nds = dataspace.from_df(df)\nprint(\"Column types:\", ds.cols_())\nds.to_float(\"col1\")\nprint(\"Column types after convert:\", ds.cols_())\nds.show()", "to_type": "data = {\"col1\": [1, 0, 0]}\ndf = pd.DataFrame(data)\nds = dataspace.from_df(df)\nprint(\"Column types:\", ds.cols_())\nds.to_type(bool, \"col1\")\nprint(\"Column types after convert:\", ds.cols_())\nds.show()", "strip": "data = {\"col1\": [\" one \", \"two \"]}\ndf = pd.DataFrame(data)\nds = dataspace.from_df(df)\nprint(list(ds.df.col1))\nds.strip(\"col1\")\nprint(list(ds.df.col1))\nds.show()", "strip_cols": "data = {\"col1 \": [1, 2], \" col2 \": [3, 4]}\ndf = pd.DataFrame(data)\nds = dataspace.from_df(df)\nprint(list(ds.df.columns.values))\nds.strip_cols()\nprint(list(ds.df.columns.values))\nds.show()", "roundvals": "data = {\"col1\": [1.25889, 1.25874, 1.42587]}\ndf = pd.DataFrame(data)\nds = dataspace.from_df(df)\nds.roundvals(\"col1\")\nds.show()", "replace": "data = {\"col1\": [\"a\", \"b\", \"novalue\"]}\ndf = pd.DataFrame(data)\nds = dataspace.from_df(df)\nds.replace(\"col1\", \"novalue\", \"c\")\nds.show()", "index": "data = {\"col1\": [\"a\", \"b\", \"c\"], \"col2\": [12, 7, 5]}\ndf = pd.DataFrame(data)\nds = dataspace.from_df(df)\nds.index(\"col1\")\nds.show()", "dateindex": "ds = await load_dataset(\"timeserie\")\nds.dateindex(\"date\")\nds.show()", "split_": "ds = await load_dataset(\"bitcoin\")\nprint(\"Unique values in the sources column:\", ds.unique_(\"Source\"))\ndss = ds.split_(\"Source\")\nprint(\"splitted DataSpace objects:\", dss.keys())\ndss[\"FTX\"].show()", "indexcol": "data = {\"col1\": [\"A\", \"B\", \"C\", \"D\"]}\ndf = pd.DataFrame(data)\nds = dataspace.from_df(df)\nds.indexcol(\"id\")\nds.show()", "drop": "data = {\"col1\": [14, 8, 12], \"col2\": [0, 1, 0]}\ndf = pd.DataFrame(data)\nds = dataspace.from_df(df)\nds.drop(\"col2\")\nds.show()", "add": "df = pd.DataFrame(np.linspace(1, 100, 5), columns=[\"num\"])\nds = dataspace.from_df(df)\nprint(\"Adding a column with default value\")\nds.add(\"num2\", 1)\nds.show()", "rename": "data = {\"col1\": [0, 1, 0]}\ndf = pd.DataFrame(data)\nds = dataspace.from_df(df)\nds.rename(\"col1\", \"new name\")\nds.show()", "keep": "data = {\"col1\": [0, 1, 0], \"col2\": [0, 0, 1], \"col3\": [1, 1, 1], \"col4\": [0, 0, 1]}\ndf = pd.DataFrame(data)\nds = dataspace.from_df(df)\nds.keep(\"col1\", \"col4\")\nds.show()", "copycol": "data = {\"col1\": [14, 8, 12], \"col2\": [0, 1, 0]}\ndf = pd.DataFrame(data)\nds = dataspace.from_df(df)\nds.copycol(\"col2\", \"new col name\")\nds.show()", "sort": "data = {\"col1\": [14, 25, 3, 8, 12]}\ndf = pd.DataFrame(data)\nds = dataspace.from_df(df)\nds.sort(\"col1\")\nds.show()", "exclude": "data = {\"col1\": [1, 0, 1, 4, 5, 1]}\ndf = pd.DataFrame(data)\nds = dataspace.from_df(df)\nds.exclude(\"col1\", 1)\nds.show()", "dropr": "data = {\"col1\": [1, 2, 3, 4, 5]}\ndf = pd.DataFrame(data)\nds = dataspace.from_df(df)\nds.dropr([0, 4])\nds.show()", "append": "data = {\"col1\": [1, 2], \"col2\": [\"foo\", \"bar\"]}\ndf = pd.DataFrame(data)\nds = dataspace.from_df(df)\nds.append(0, \"baz\")\nds.show()", "reverse": "data = {\"col1\": [1, 2, 3, 4, 5]}\ndf = pd.DataFrame(data)\nds = dataspace.from_df(df)\nds.reverse()\nds.show()", "apply": "data = {\"col1\": [1, 2, 3, 4, 5]}\ndf = pd.DataFrame(data)\nds = dataspace.from_df(df)\n\ndef f(row):\n    # add a new column with a value\n    row[\"newcol\"] = row[\"col1\"] + 1\n    return row\n\nds.apply(f)\nds.show()", "rsum": "ds = await load_dataset(\"bitcoin\")\nds.keep(\"mktTS\", \"qty\")\nds.dateindex(\"mktTS\")\nds.rsum(\"1S\", \"Datapoints per second\")\nds.rename(\"qty\", \"Market volume\")\nds.show()", "rmean": "ds = await load_dataset(\"bitcoin\")\nds.rmean(\"1S\", \"Datapoints per second\", dateindex=\"mktTS\")\nds.rename(\"px\", \"Mean price\")\nds.show()", "axis": "ds = await load_dataset(\"sp500\")\nds.axis(\"date:T\", \"price:Q\")\nds.line_().to_json()", "bar_": "data = {\"col1\": [\"A\", \"B\", \"C\", \"D\", \"E\"], \"col2\": [1, 6, 2, 4, 1]}\ndf = pd.DataFrame(data)\nds = dataspace.from_df(df)\nds.bar_(\"col1:N\", \"col2:Q\").to_json()", "line_": "ds = await load_dataset(\"sp500\")\nds.axis(\"date:T\", \"price:Q\")\nds.line_().to_json()", "point_": "ds = await load_dataset(\"sp500\")\nds.axis(\"date:T\", \"price:Q\")\nds.point_().to_json()", "area_": "ds = await load_dataset(\"sp500\")\nds.axis(\"date:T\", \"price:Q\")\nds.area_().to_json()", "hline_": "data = {\"col1\": [\"A\", \"B\", \"C\", \"D\", \"E\"], \"col2\": [1, 6, 2, 4, 1]}\ndf = pd.DataFrame(data)\nds = dataspace.from_df(df)\nchart = ds.bar_(\"col1:N\", \"col2:Q\")\nhline = ds.hline_(style={\"color\": \"green\"})\n(chart + hline).to_json()"}