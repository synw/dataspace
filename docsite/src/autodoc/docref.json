{"__init__": {"funcdef": "def __init__(self, df: pd.DataFrame = None) -> None", "description": null, "params": {}, "raises": {}, "return": {"name": null, "type": null}}, "__repr__": {"funcdef": "def __repr__(self) -> str", "description": null, "params": {}, "raises": {}, "return": {"name": null, "type": null}}, "show": {"funcdef": "def show(self, rows: int = 5) -> pd.DataFrame", "description": "Display info about the dataframe", "params": {"rows": {"description": "number of rows to show, **default**: 5", "type": "``int`` *optional*", "default": null}}, "raises": {}, "return": {"name": null, "type": "``DataFrame``"}}, "cols_": {"funcdef": "def cols_(self) -> pd.DataFrame", "description": "Returns a dataframe with columns info", "params": {}, "raises": {}, "return": {"name": null, "type": "``DataFrame``"}}, "to_date": {"funcdef": "def to_date(self, *cols: str, **kwargs) -> None", "description": "Convert some columns values to date type", "params": {"cols": {"description": "names of the colums", "type": "str *at least one*", "default": null}, "\\*\\*kwargs": {"description": "keyword arguments for ``pd.to_datetime``", "type": "optional", "default": null}}, "raises": {}, "return": {"name": null, "type": null}}, "to_int": {"funcdef": "def to_int(self, *cols: str, **kwargs) -> None", "description": "Convert some column values to integers", "params": {"\\*cols": {"description": "names of the columns", "type": "str *at least one*", "default": null}, "\\*\\*kwargs": {"description": "keyword arguments for ``pd.to_numeric``", "type": "optional", "default": null}}, "raises": {}, "return": {"name": null, "type": null}}, "to_float": {"funcdef": "def to_float(self, *cols: str, **kwargs) -> None", "description": "Convert colums values to float", "params": {"cols": {"description": "name of the columns", "type": "str *at least one*", "default": null}, "\\*\\*kwargs": {"description": "keyword arguments for ``df.astype``", "type": "optional", "default": null}}, "raises": {}, "return": {"name": null, "type": null}}, "to_type": {"funcdef": "def to_type(self, dtype: type, *cols: str, **kwargs) -> None", "description": "Convert colums values to a given type in the", "params": {"dtype": {"description": "a type to convert to: ex: str", "type": "``type``", "default": null}, "\\*cols": {"description": "names of the columns", "type": "str *at least one**", "default": null}, "\\*\\*kwargs": {"description": "keyword arguments for ``df.astype``", "type": "optional", "default": null}}, "raises": {}, "return": {"name": null, "type": null}}, "drop_nan": {"funcdef": "def drop_nan(self, col: str, method: str = \"all\", **kwargs) -> None", "description": "Drop rows with ``NaN`` values from the main dataframe", "params": {"col": {"description": "name of the column", "type": "str *optional*", "default": null}, "method": {"description": "``how`` param for ``df.dropna``, **default**: \"all\"", "type": "str *optional*", "default": null}, "\\*\\*kwargs": {"description": "params for ``df.dropna``", "type": "optional", "default": null}}, "raises": {}, "return": {"name": null, "type": null}}, "fill_nan": {"funcdef": "def fill_nan(self, val: str, *cols)", "description": "Fill NaN values with new values in the main dataframe", "params": {"val": {"description": "new value", "type": "str", "default": null}, "\\*cols": {"description": "names of the colums", "type": "str *at least one*", "default": null}}, "raises": {}, "return": {"name": null, "type": null}}, "fill_nulls": {"funcdef": "def fill_nulls(self, val=nan, *cols: str, nulls=[None, \"\"])", "description": "Fill all null values with NaN values in a column.", "params": {"cols": {"description": "columns names", "type": "str *at least one*", "default": null}}, "raises": {}, "return": {"name": null, "type": null}}, "index": {"funcdef": "def index(self, col: str) -> pd.DataFrame", "description": "Set an index to the main dataframe", "params": {"col": {"description": "column name where to index from", "type": "str", "default": null}}, "raises": {}, "return": {"name": null, "type": null}}, "dateindex": {"funcdef": "def dateindex(self, col: str) -> pd.DataFrame", "description": "Set a datetime index from a column", "params": {"col": {"description": "column name where to index the date from", "type": "str", "default": null}}, "raises": {}, "return": {"name": null, "type": null}}, "fdate": {"funcdef": "def fdate(self, *cols, precision: str = \"S\", format: Optional[str] = None)", "description": "Convert column values to formated date string", "params": {"\\*cols": {"description": "names of the colums", "type": "str, at least one", "default": null}, "precision": {"description": "time precision: Y, M, D, H, Min S, defaults to \"S\"", "type": "str *optional*", "default": "\"S\""}, "format": {"description": "python date format, defaults to None", "type": "str, optional", "default": "None"}}, "raises": {}, "return": {"name": null, "type": null}}, "timestamps": {"funcdef": "def timestamps(self, col: str, **kwargs)", "description": "Add a timestamps column from a date column", "params": {"col": {"description": "name of the timestamps column to add", "type": "str", "default": null}, "\\*\\*kwargs": {"description": "keyword arguments for ``pd.to_datetime``", "type": "optional", "default": null}}, "raises": {}, "return": {"name": null, "type": null}}, "strip": {"funcdef": "def strip(self, *cols: str)", "description": "Remove leading and trailing white spaces column's values", "params": {"col": {"description": "name of the column", "type": "str", "default": null}}, "raises": {}, "return": {"name": null, "type": null}}, "strip_cols": {"funcdef": "def strip_cols(self)", "description": "Remove leading and trailing white spaces in columns names", "params": {}, "raises": {}, "return": {"name": null, "type": null}}, "roundvals": {"funcdef": "def roundvals(self, col: str, precision: int = 2)", "description": "Round floats in a column. Numbers are going to be", "params": {"col": {"description": "column name", "type": "str", "default": null}, "precision": {"description": "``int`` *optional*", "type": null, "default": null}}, "raises": {}, "return": {"name": null, "type": null}}, "replace": {"funcdef": "def replace(self, col: str, searchval: str, replaceval: str)", "description": "Replace a value in a column in the main dataframe", "params": {"col": {"description": "column name", "type": "str", "default": null}, "searchval": {"description": "value to replace", "type": "str", "default": null}, "replaceval": {"description": "new value", "type": "str", "default": null}}, "raises": {}, "return": {"name": null, "type": null}}, "limit": {"funcdef": "def limit(self, r: int = 5) -> None", "description": "Limit selection to a range in the main dataframe", "params": {"r": {"description": "number of rows to keep, **default**: 5", "type": "``int`` *optional*", "default": null}}, "raises": {}, "return": {"name": null, "type": null}}, "unique_": {"funcdef": "def unique_(self, col: str) -> List[str]", "description": "Returns a list of unique values in a column", "params": {"col": {"description": "the column to select from", "type": "str", "default": null}}, "raises": {}, "return": {"name": null, "type": "``List[str]``"}}, "wunique_": {"funcdef": "def wunique_(self, col: str, colname: str = \"Number\") -> pd.DataFrame", "description": "Weight unique values: returns a dataframe with a count", "params": {"col": {"description": "the column to select from", "type": "str", "default": null}}, "raises": {}, "return": {"name": null, "type": "``pd.DataFrame``"}}, "count_null_": {"funcdef": "def count_null_(self, col: str) -> int", "description": "Count the number of null values in a column", "params": {"col": {"description": "the column to count from", "type": "str", "default": null}}, "raises": {}, "return": {"name": null, "type": "int"}}, "count_empty_": {"funcdef": "def count_empty_(self, col: str) -> int", "description": "List of empty row indices", "params": {"col": {"description": "column to count from", "type": "str", "default": null}}, "raises": {}, "return": {"name": null, "type": "int"}}, "count_zero_": {"funcdef": "def count_zero_(self, col: str) -> int", "description": "List of row with 0 values", "params": {"col": {"description": "column to count from", "type": "str", "default": null}}, "raises": {}, "return": {"name": null, "type": "int"}}, "count_unique_": {"funcdef": "def count_unique_(self, col: str) -> int", "description": "Return the number of unique values in a column", "params": {"col": {"description": "column to count from", "type": "str", "default": null}}, "raises": {}, "return": {"name": null, "type": "int"}}, "split_": {"funcdef": "def split_(self, col: str) -> Dict[str, \"DataSpace\"]", "description": "Split the main dataframe according to a column's unique values and", "params": {}, "raises": {}, "return": {"name": null, "type": "``List[DataSpace]``"}}, "sort": {"funcdef": "def sort(self, col: str, **kwargs)", "description": "Sorts the main dataframe according to the given column", "params": {"col": {"description": "column name", "type": "str", "default": null}}, "raises": {}, "return": {"name": null, "type": null}}, "indexcol": {"funcdef": "def indexcol(self, col: str)", "description": "Add a column from the index", "params": {"col": {"description": "name of the new column", "type": "str", "default": null}}, "raises": {}, "return": {"name": null, "type": null}}, "drop": {"funcdef": "def drop(self, *cols) -> None", "description": "Drops columns from the main dataframe", "params": {"cols": {"description": "names of the columns", "type": "str", "default": null}}, "raises": {}, "return": {"name": null, "type": null}}, "rename": {"funcdef": "def rename(self, source_col: str, dest_col: str) -> None", "description": "Renames a column in the main dataframe", "params": {"source_col": {"description": "name of the column to rename", "type": "str", "default": null}, "dest_col": {"description": "new name of the column", "type": "str", "default": null}}, "raises": {}, "return": {"name": null, "type": null}}, "add": {"funcdef": "def add(self, col: str, value) -> None", "description": "Add a column with default values", "params": {"col": {"description": "column name", "type": "str", "default": null}, "value": {"description": "column value", "type": "any", "default": null}}, "raises": {}, "return": {"name": null, "type": null}}, "keep": {"funcdef": "def keep(self, *cols) -> None", "description": "Limit the dataframe to some columns", "params": {"cols": {"description": "names of the columns", "type": "str", "default": null}}, "raises": {}, "return": {"name": null, "type": null}}, "exclude": {"funcdef": "def exclude(self, col: str, val) -> None", "description": "Delete rows based on value", "params": {"col": {"description": "column name", "type": "str", "default": null}, "val": {"description": "value to delete", "type": "any", "default": null}}, "raises": {}, "return": {"name": null, "type": null}}, "copycol": {"funcdef": "def copycol(self, origin_col: str, dest_col: str)", "description": "Copy a columns values in another column", "params": {"origin_col": {"description": "name of the column to copy", "type": "str", "default": null}, "dest_col": {"description": "name of the new column", "type": "str", "default": null}}, "raises": {}, "return": {"name": null, "type": null}}, "dropr": {"funcdef": "def dropr(self, *rows)", "description": "Drops some rows from the main dataframe", "params": {"rows": {"description": "rows names", "type": "list of ints", "default": null}}, "raises": {}, "return": {"name": null, "type": null}}, "append": {"funcdef": "def append(self, *vals, ignore_index=True) -> None", "description": "Append a row to the main dataframe", "params": {"vals": {"description": "list of the row values to add", "type": "list", "default": null}, "index": {"description": "any, optional", "type": null, "default": null}}, "raises": {}, "return": {"name": null, "type": null}}, "reverse": {"funcdef": "def reverse(self) -> None", "description": "Reverses the main dataframe order", "params": {}, "raises": {}, "return": {"name": null, "type": null}}, "apply": {"funcdef": "def apply(self, function, *cols: List[str], axis=1, **kwargs) -> None", "description": "Apply a function on columns values", "params": {"function": {"description": "a function to apply to the columns", "type": "function", "default": null}, "cols": {"description": "columns names", "type": "name of columns", "default": null}, "axis": {"description": "index (0) or column (1), default is 1", "type": null, "default": null}, "kwargs": {"description": "arguments for ``df.apply``", "type": "optional", "default": null}}, "raises": {}, "return": {"name": null, "type": null}}, "rsum": {"funcdef": "def rsum", "description": "Resample and add a sum the main dataframe to a time period", "params": {"time_period": {"description": "str", "type": null, "default": null}, "num_col": {"description": "str, optional", "type": null, "default": null}, "dateindex": {"description": "str, optional", "type": null, "default": null}}, "raises": {}, "return": {"name": null, "type": null}}, "rmean": {"funcdef": "def rmean", "description": "Resample and add a sum column the main dataframe to a time period", "params": {"time_period": {"description": "str", "type": null, "default": null}, "num_col": {"description": "str, optional", "type": null, "default": null}, "dateindex": {"description": "column name to use as date index, defaults to None", "type": null, "default": "None"}}, "raises": {}, "return": {"name": null, "type": null}}, "percent": {"funcdef": "def percent(self, col: str, roundn=1)", "description": "add a percent column", "params": {"col": {"description": "the column to calculate percentages from", "type": "str", "default": null}, "roundn": {"description": "round level, defaults to 1", "type": "int, optional", "default": "1"}}, "raises": {}, "return": {"name": null, "type": null}}, "diffn": {"funcdef": "def diffn(self, diffcol: str, name: str = \"Diff\", doround=True) -> None", "description": "Add a diff column to the main dataframe: calculate the diff", "params": {"diffcol": {"description": "column to diff from", "type": "str", "default": null}, "name": {"description": "diff column name, defaults to \"Diff\"", "type": "str, optional", "default": "\"Diff\""}}, "raises": {}, "return": {"name": null, "type": null}}, "diffnp": {"funcdef": "def diffnp(self, diffcol: str, name: str = \"Diff\", doround=True) -> None", "description": "Add a diff column to the main dataframe: calculate the diff", "params": {"diffcol": {"description": "column to diff from", "type": "str", "default": null}, "name": {"description": "diff column name, defaults to \"Diff\"", "type": "str, optional", "default": "\"Diff\""}}, "raises": {}, "return": {"name": null, "type": null}}, "diffp": {"funcdef": "def diffp(self, diffcol: str, name: str = \"Diff\", doround=True) -> None", "description": "Add a diff column to the main dataframe: calculate the diff", "params": {"diffcol": {"description": "column to diff from", "type": "str", "default": null}, "name": {"description": "diff column name, defaults to \"Diff\"", "type": "str, optional", "default": "\"Diff\""}}, "raises": {}, "return": {"name": null, "type": null}}, "diffpp": {"funcdef": "def diffpp(self, diffcol: str, name: str = \"Diff\", doround=True) -> None", "description": "Add a diff column to the main dataframe: calculate the diff", "params": {"diffcol": {"description": "column to diff from", "type": "str", "default": null}, "name": {"description": "diff column name, defaults to \"Diff\"", "type": "str, optional", "default": "\"Diff\""}}, "raises": {}, "return": {"name": null, "type": null}}, "diffm": {"funcdef": "def diffm", "description": "Add a diff column to the main dataframe: calculate the", "params": {"diffcol": {"description": "column to diff from", "type": "str", "default": null}, "name": {"description": "str, optional", "type": null, "default": null}, "default": {"description": "optional", "type": null, "default": null}}, "raises": {}, "return": {"name": null, "type": null}}, "diffmp": {"funcdef": "def diffmp", "description": "Add a diff column to the main dataframe: calculate the", "params": {"diffcol": {"description": "column to diff from", "type": "str", "default": null}, "name": {"description": "str, optional", "type": null, "default": null}, "default": {"description": "optional", "type": null, "default": null}}, "raises": {}, "return": {"name": null, "type": null}}, "bokeh": {"funcdef": "def bokeh(self) -> None", "description": "Use the Bokeh charts engine", "params": {}, "raises": {}, "return": {"name": null, "type": null}}, "altair": {"funcdef": "def altair(self) -> None", "description": "Use the Altair charts engine", "params": {}, "raises": {}, "return": {"name": null, "type": null}}, "axis": {"funcdef": "def axis(self, x_axis_col: str, y_axis_col: str)", "description": "Set the columns to use for the chart x and y axis", "params": {"x_axis_col": {"description": "name of the column to use for x axis chart", "type": "str", "default": null}, "y_axis_col": {"description": "name of the column to use for y axis chart", "type": "str", "default": null}}, "raises": {}, "return": {"name": null, "type": null}}, "line_": {"funcdef": "def line_(self, *args, **kwargs)", "description": "Draw a line chart", "params": {"x_axis_col": {"description": "name of the column to use for x axis chart, defaults\nto the x axis value set by ds.axis", "type": "Optional[str]", "default": null}, "y_axis_col": {"description": "name of the column to use for y axis chart, defaults\nto the y axis value set by ds.axis", "type": "Optional[str]", "default": null}}, "raises": {}, "return": {"name": null, "type": "an Altair or Bokeh chart"}}, "point_": {"funcdef": "def point_(self, *args, **kwargs)", "description": "Draw a point chart", "params": {}, "raises": {}, "return": {"name": null, "type": "Bokeh or Altair chart"}}, "bar_": {"funcdef": "def bar_(self, *args, **kwargs)", "description": "Draw a bar chart", "params": {}, "raises": {}, "return": {"name": null, "type": "Bokeh or Altair chart"}}, "square_": {"funcdef": "def square_(self, *args, **kwargs)", "description": "Draw a square chart with numbers. Only for Altair", "params": {}, "raises": {}, "return": {"name": null, "type": "Altair chart"}}, "rule_": {"funcdef": "def rule_(self, *args, **kwargs)", "description": "Draw a rule chart with numbers. Only for Altair", "params": {}, "raises": {}, "return": {"name": null, "type": "Altair chart"}}, "tick_": {"funcdef": "def tick_(self, *args, **kwargs)", "description": "Draw a square chart with numbers. Only for Altair", "params": {}, "raises": {}, "return": {"name": null, "type": "Altair chart"}}, "bar_num_": {"funcdef": "def bar_num_(self, *args, **kwargs)", "description": "Draw a bar chart with numbers. Only for Altair", "params": {}, "raises": {}, "return": {"name": null, "type": "Altair chart"}}, "line_num_": {"funcdef": "def line_num_(self, *args, **kwargs)", "description": "Draw a line chart with numbers. Only for Altair", "params": {}, "raises": {}, "return": {"name": null, "type": "Altair chart"}}, "point_num_": {"funcdef": "def point_num_(self, *args, **kwargs)", "description": "Draw a point chart with numbers. Only for Altair", "params": {}, "raises": {}, "return": {"name": null, "type": "Altair chart"}}, "area_": {"funcdef": "def area_(self, *args, **kwargs)", "description": "Draw an area chart", "params": {}, "raises": {}, "return": {"name": null, "type": "Bokeh or Altair chart"}}, "heatmap_": {"funcdef": "def heatmap_(self, *args, **kwargs)", "description": "Draw a heatmap chart", "params": {}, "raises": {}, "return": {"name": null, "type": "Bokeh or Altair chart"}}, "hist_": {"funcdef": "def hist_(self, *args, **kwargs)", "description": "Draw a histogram chart", "params": {}, "raises": {}, "return": {"name": null, "type": "Bokeh or Altair chart"}}, "hline_": {"funcdef": "def hline_(self, *args, **kwargs)", "description": "Draw an horizontal mean line for the y axis", "params": {}, "raises": {}, "return": {"name": null, "type": "Bokeh or Altair chart"}}, "w": {"funcdef": "def w(self, v: int)", "description": "Set the default width of charts", "params": {"v": {"description": "the width to set, in pixel", "type": "int", "default": null}}, "raises": {}, "return": {"name": null, "type": null}}, "h": {"funcdef": "def h(self, v: int)", "description": "Set the default width of charts", "params": {"v": {"description": "the height to set, in pixel", "type": "int", "default": null}}, "raises": {}, "return": {"name": null, "type": null}}, "wh": {"funcdef": "def wh(self, w: int, h: int)", "description": "Set the default width and height of charts", "params": {"w": {"description": "the height to set, in pixel", "type": "int", "default": null}, "h": {"description": "the height to set, in pixel", "type": "int", "default": null}}, "raises": {}, "return": {"name": null, "type": null}}, "export_csv": {"funcdef": "def export_csv(self, filepath: str, **kwargs) -> None", "description": "Write the main dataframe to a csv file", "params": {"filepath": {"description": "path of the file to save", "type": "str", "default": null}, "\\*\\*kwargs": {"description": "arguments to pass to ``pd.to_csv``", "type": null, "default": null}}, "raises": {}, "return": {"name": null, "type": null}}}