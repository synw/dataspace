{"show": {"funcdef": "def show(self, rows: int = 5) -> pd.DataFrame", "description": "Display info about the dataframe\n", "long_description": "Category: Info/View data/Show\n", "example": null, "params": {"rows": {"description": "number of rows to show, <strong>default</strong>: 5\n", "type": "<tt class=\"docutils literal\">int</tt> <em>optional</em>\n", "default": null}}, "raises": {}, "return": {"name": null, "type": "<tt class=\"docutils literal\">DataFrame</tt>\n"}}, "cols_": {"funcdef": "def cols_(self) -> pd.DataFrame", "description": "Returns a dataframe with columns info\n", "long_description": "Category: Info/View data/Show\n", "example": null, "params": {}, "raises": {}, "return": {"name": null, "type": "<tt class=\"docutils literal\">DataFrame</tt>\n"}}, "to_date": {"funcdef": "def to_date(self, *cols: str, **kwargs) -> None", "description": "Convert some columns values to date type\n", "long_description": "Category: Clean/Dates/To date\n", "example": null, "params": {"cols": {"description": "names of the colums\n", "type": "str <em>at least one</em>\n", "default": null}, "\\*\\*kwargs": {"description": "keyword arguments for <tt class=\"docutils literal\">pd.to_datetime</tt>\n", "type": "optional\n", "default": null}}, "raises": {}, "return": {"name": "", "type": ""}}, "to_int": {"funcdef": "def to_int(self, *cols: str, **kwargs) -> None", "description": "Convert some column values to integers\n", "long_description": "Category: Clean/Convert types/To type\n", "example": null, "params": {"\\*cols": {"description": "names of the columns\n", "type": "str <em>at least one</em>\n", "default": null}, "\\*\\*kwargs": {"description": "keyword arguments for <tt class=\"docutils literal\">pd.to_numeric</tt>\n", "type": "optional\n", "default": null}}, "raises": {}, "return": {"name": "", "type": ""}}, "to_float": {"funcdef": "def to_float(self, *cols: str, **kwargs) -> None", "description": "Convert colums values to float -\n", "long_description": "Category: Clean/Convert types/To float\n", "example": null, "params": {"cols": {"description": "name of the columns\n", "type": "str <em>at least one</em>\n", "default": null}, "\\*\\*kwargs": {"description": "keyword arguments for <tt class=\"docutils literal\">df.astype</tt>\n", "type": "optional\n", "default": null}}, "raises": {}, "return": {"name": "", "type": ""}}, "to_type": {"funcdef": "def to_type(self, dtype: type, *cols: str, **kwargs) -> None", "description": "Convert colums values to a given type in the main dataframe\n", "long_description": "Category: Clean/Convert types/To type\n", "example": null, "params": {"dtype": {"description": "a type to convert to: ex: str\n", "type": "<tt class=\"docutils literal\">type</tt>\n", "default": null}, "\\*cols": {"description": "names of the columns\n", "type": "str <em>at least one*</em>\n", "default": null}, "\\*\\*kwargs": {"description": "keyword arguments for <tt class=\"docutils literal\">df.astype</tt>\n", "type": "optional\n", "default": null}}, "raises": {}, "return": {"name": "", "type": ""}}, "drop_nan": {"funcdef": "def drop_nan(self, col: str, method: str = \"all\", **kwargs) -> None", "description": "Drop rows with <tt class=\"docutils literal\">NaN</tt> values from the main dataframe\n", "long_description": null, "example": null, "params": {"col": {"description": "name of the column\n", "type": "str <em>optional</em>\n", "default": null}, "method": {"description": "<tt class=\"docutils literal\">how</tt> param for <tt class=\"docutils literal\">df.dropna</tt>, <strong>default</strong>: &quot;all&quot;\n", "type": "str <em>optional</em>\n", "default": null}, "\\*\\*kwargs": {"description": "params for <tt class=\"docutils literal\">df.dropna</tt>\n", "type": "optional\n", "default": null}}, "raises": {}, "return": {"name": "", "type": ""}}, "fill_nan": {"funcdef": "def fill_nan(self, val: str, *cols)", "description": "Fill NaN values with new values in the main dataframe\n", "long_description": null, "example": null, "params": {"val": {"description": "new value\n", "type": "str\n", "default": null}, "\\*cols": {"description": "names of the colums\n", "type": "str <em>at least one</em>\n", "default": null}}, "raises": {}, "return": {"name": "", "type": ""}}, "fill_nulls": {"funcdef": "def fill_nulls(self, val=nan, *cols: str, nulls=[None, \"\"])", "description": "Fill all null values with NaN values in a column.\n", "long_description": "Null values are <tt class=\"docutils literal\">None</tt> or en empty string\n", "example": null, "params": {"cols": {"description": "columns names\n", "type": "str <em>at least one</em>\n", "default": null}}, "raises": {}, "return": {"name": "", "type": ""}}, "index": {"funcdef": "def index(self, col: str) -> pd.DataFrame", "description": "Set an index to the main dataframe\n", "long_description": null, "example": null, "params": {"col": {"description": "column name where to index from\n", "type": "str\n", "default": null}}, "raises": {}, "return": {"name": "", "type": ""}}, "dateindex": {"funcdef": "def dateindex(self, col: str) -> pd.DataFrame", "description": "Set a datetime index from a column\n", "long_description": null, "example": null, "params": {"col": {"description": "column name where to index the date from\n", "type": "str\n", "default": null}}, "raises": {}, "return": {"name": "", "type": ""}}, "fdate": {"funcdef": "def fdate(self, *cols, precision: str = \"S\", format: Optional[str] = None)", "description": "Convert column values to formated date string\n", "long_description": null, "example": null, "params": {"\\*cols": {"description": "names of the colums\n", "type": "str, at least one\n", "default": null}, "precision": {"description": "time precision: Y, M, D, H, Min S, defaults to &quot;S&quot;\n", "type": "str <em>optional</em>\n", "default": "&quot;S&quot;\n"}, "format": {"description": "python date format, defaults to None\n", "type": "str, optional\n", "default": "None\n"}}, "raises": {}, "return": {"name": "", "type": ""}}, "timestamps": {"funcdef": "def timestamps(self, col: str, **kwargs)", "description": "Add a timestamps column from a date column\n", "long_description": null, "example": null, "params": {"col": {"description": "name of the timestamps column to add\n", "type": "str\n", "default": null}, "\\*\\*kwargs": {"description": "keyword arguments for <tt class=\"docutils literal\">pd.to_datetime</tt>\n", "type": "optional\n", "default": null}}, "raises": {}, "return": {"name": "", "type": ""}}, "strip": {"funcdef": "def strip(self, *cols: str)", "description": "Remove leading and trailing white spaces column's values\n", "long_description": null, "example": null, "params": {"col": {"description": "name of the column\n", "type": "str\n", "default": null}}, "raises": {}, "return": {"name": "", "type": ""}}, "strip_cols": {"funcdef": "def strip_cols(self)", "description": "Remove leading and trailing white spaces in columns names\n", "long_description": null, "example": null, "params": {}, "raises": {}, "return": {"name": "", "type": ""}}, "roundvals": {"funcdef": "def roundvals(self, col: str, precision: int = 2)", "description": "Round floats in a column. Numbers are going to be\n", "long_description": "converted to floats if they are not already\n", "example": null, "params": {"col": {"description": "column name\n", "type": "str\n", "default": null}, "precision": {"description": "<tt class=\"docutils literal\">int</tt> <em>optional</em>\n", "type": null, "default": null}}, "raises": {}, "return": {"name": "", "type": ""}}, "replace": {"funcdef": "def replace(self, col: str, searchval: str, replaceval: str)", "description": "Replace a value in a column in the main dataframe\n", "long_description": null, "example": null, "params": {"col": {"description": "column name\n", "type": "str\n", "default": null}, "searchval": {"description": "value to replace\n", "type": "str\n", "default": null}, "replaceval": {"description": "new value\n", "type": "str\n", "default": null}}, "raises": {}, "return": {"name": "", "type": ""}}, "limit": {"funcdef": "def limit(self, r: int = 5) -> None", "description": "Limit selection to a range in the main dataframe\n", "long_description": null, "example": null, "params": {"r": {"description": "number of rows to keep, <strong>default</strong>: 5\n", "type": "<tt class=\"docutils literal\">int</tt> <em>optional</em>\n", "default": null}}, "raises": {}, "return": {"name": "", "type": ""}}, "unique_": {"funcdef": "def unique_(self, col: str) -> List[str]", "description": "Returns a list of unique values in a column\n", "long_description": null, "example": null, "params": {"col": {"description": "the column to select from\n", "type": "str\n", "default": null}}, "raises": {}, "return": {"name": null, "type": "<tt class=\"docutils literal\">List[str]</tt>\n"}}, "wunique_": {"funcdef": "def wunique_(self, col: str, colname: str = \"Number\") -> pd.DataFrame", "description": "Weight unique values: returns a dataframe with a count\n", "long_description": "of unique values for a column\n", "example": null, "params": {"col": {"description": "the column to select from\n", "type": "str\n", "default": null}}, "raises": {}, "return": {"name": null, "type": "<tt class=\"docutils literal\">pd.DataFrame</tt>\n"}}, "count_null_": {"funcdef": "def count_null_(self, col: str) -> int", "description": "Count the number of null values in a column\n", "long_description": null, "example": null, "params": {"col": {"description": "the column to count from\n", "type": "str\n", "default": null}}, "raises": {}, "return": {"name": null, "type": "int\n"}}, "count_empty_": {"funcdef": "def count_empty_(self, col: str) -> int", "description": "List of empty row indices\n", "long_description": null, "example": null, "params": {"col": {"description": "column to count from\n", "type": "str\n", "default": null}}, "raises": {}, "return": {"name": null, "type": "int\n"}}, "count_zero_": {"funcdef": "def count_zero_(self, col: str) -> int", "description": "List of row with 0 values\n", "long_description": null, "example": null, "params": {"col": {"description": "column to count from\n", "type": "str\n", "default": null}}, "raises": {}, "return": {"name": null, "type": "int\n"}}, "count_unique_": {"funcdef": "def count_unique_(self, col: str) -> int", "description": "Return the number of unique values in a column\n", "long_description": null, "example": null, "params": {"col": {"description": "column to count from\n", "type": "str\n", "default": null}}, "raises": {}, "return": {"name": null, "type": "int\n"}}, "split_": {"funcdef": "def split_(self, col: str) -> Dict[str, \"DataSpace\"]", "description": "Split the main dataframe according to a column's unique values and\n", "long_description": "return a dict of DataSpace instances\n", "example": null, "params": {}, "raises": {}, "return": {"name": null, "type": "<tt class=\"docutils literal\">List[DataSpace]</tt>\n"}}, "sort": {"funcdef": "def sort(self, col: str, **kwargs)", "description": "Sorts the main dataframe according to the given column\n", "long_description": null, "example": null, "params": {"col": {"description": "column name\n", "type": "str\n", "default": null}}, "raises": {}, "return": {"name": "", "type": ""}}, "indexcol": {"funcdef": "def indexcol(self, col: str)", "description": "Add a column from the index\n", "long_description": null, "example": null, "params": {"col": {"description": "name of the new column\n", "type": "str\n", "default": null}}, "raises": {}, "return": {"name": "", "type": ""}}, "drop": {"funcdef": "def drop(self, *cols) -> None", "description": "Drops columns from the main dataframe\n", "long_description": null, "example": null, "params": {"cols": {"description": "names of the columns\n", "type": "str\n", "default": null}}, "raises": {}, "return": {"name": "", "type": ""}}, "rename": {"funcdef": "def rename(self, source_col: str, dest_col: str) -> None", "description": "Renames a column in the main dataframe\n", "long_description": null, "example": null, "params": {"source_col": {"description": "name of the column to rename\n", "type": "str\n", "default": null}, "dest_col": {"description": "new name of the column\n", "type": "str\n", "default": null}}, "raises": {}, "return": {"name": "", "type": ""}}, "add": {"funcdef": "def add(self, col: str, value) -> None", "description": "Add a column with default values\n", "long_description": null, "example": null, "params": {"col": {"description": "column name\n", "type": "str\n", "default": null}, "value": {"description": "column value\n", "type": "any\n", "default": null}}, "raises": {}, "return": {"name": "", "type": ""}}, "keep": {"funcdef": "def keep(self, *cols) -> None", "description": "Limit the dataframe to some columns\n", "long_description": null, "example": null, "params": {"cols": {"description": "names of the columns\n", "type": "str\n", "default": null}}, "raises": {}, "return": {"name": "", "type": ""}}, "exclude": {"funcdef": "def exclude(self, col: str, val) -> None", "description": "Delete rows based on value\n", "long_description": null, "example": null, "params": {"col": {"description": "column name\n", "type": "str\n", "default": null}, "val": {"description": "value to delete\n", "type": "any\n", "default": null}}, "raises": {}, "return": {"name": "", "type": ""}}, "copycol": {"funcdef": "def copycol(self, origin_col: str, dest_col: str)", "description": "Copy a columns values in another column\n", "long_description": null, "example": null, "params": {"origin_col": {"description": "name of the column to copy\n", "type": "str\n", "default": null}, "dest_col": {"description": "name of the new column\n", "type": "str\n", "default": null}}, "raises": {}, "return": {"name": "", "type": ""}}, "dropr": {"funcdef": "def dropr(self, *rows)", "description": "Drops some rows from the main dataframe\n", "long_description": null, "example": null, "params": {"rows": {"description": "rows names\n", "type": "list of ints\n", "default": null}}, "raises": {}, "return": {"name": "", "type": ""}}, "append": {"funcdef": "def append(self, *vals, ignore_index=True) -> None", "description": "Append a row to the main dataframe\n", "long_description": null, "example": null, "params": {"vals": {"description": "list of the row values to add\n", "type": "list\n", "default": null}, "index": {"description": "any, optional\n", "type": null, "default": null}}, "raises": {}, "return": {"name": "", "type": ""}}, "reverse": {"funcdef": "def reverse(self) -> None", "description": "Reverses the main dataframe order\n", "long_description": null, "example": null, "params": {}, "raises": {}, "return": {"name": "", "type": ""}}, "apply": {"funcdef": "def apply(self, function, *cols: List[str], axis=1, **kwargs) -> None", "description": "Apply a function on columns values\n", "long_description": null, "example": null, "params": {"function": {"description": "a function to apply to the columns\n", "type": "function\n", "default": null}, "cols": {"description": "columns names\n", "type": "name of columns\n", "default": null}, "axis": {"description": "index (0) or column (1), default is 1\n", "type": null, "default": null}, "kwargs": {"description": "arguments for <tt class=\"docutils literal\">df.apply</tt>\n", "type": "optional\n", "default": null}}, "raises": {}, "return": {"name": "", "type": ""}}, "rsum": {"funcdef": "def rsum", "description": "Resample and add a sum the main dataframe to a time period\n", "long_description": null, "example": null, "params": {"time_period": {"description": "str\n", "type": null, "default": null}, "num_col": {"description": "str, optional\n", "type": null, "default": null}, "dateindex": {"description": "str, optional\n", "type": null, "default": null}}, "raises": {}, "return": {"name": "", "type": ""}}, "rmean": {"funcdef": "def rmean", "description": "Resample and add a sum column the main dataframe to a time period\n", "long_description": null, "example": null, "params": {"time_period": {"description": "str\n", "type": null, "default": null}, "num_col": {"description": "str, optional\n", "type": null, "default": null}, "dateindex": {"description": "column name to use as date index, defaults to None\n", "type": null, "default": "None\n"}}, "raises": {}, "return": {"name": "", "type": ""}}, "percent": {"funcdef": "def percent(self, col: str, roundn=1)", "description": "add a percent column\n", "long_description": null, "example": null, "params": {"col": {"description": "the column to calculate percentages from\n", "type": "str\n", "default": null}, "roundn": {"description": "round level, defaults to 1\n", "type": "int, optional\n", "default": "1\n"}}, "raises": {}, "return": {"name": "", "type": ""}}, "diffn": {"funcdef": "def diffn(self, diffcol: str, name: str = \"Diff\", doround=True) -> None", "description": "Add a diff column to the main dataframe: calculate the diff\n", "long_description": "from the next value\n", "example": null, "params": {"diffcol": {"description": "column to diff from\n", "type": "str\n", "default": null}, "name": {"description": "diff column name, defaults to &quot;Diff&quot;\n", "type": "str, optional\n", "default": "&quot;Diff&quot;\n"}}, "raises": {}, "return": {"name": "", "type": ""}}, "diffnp": {"funcdef": "def diffnp(self, diffcol: str, name: str = \"Diff\", doround=True) -> None", "description": "Add a diff column to the main dataframe: calculate the diff\n", "long_description": "in percentage from the next value\n", "example": null, "params": {"diffcol": {"description": "column to diff from\n", "type": "str\n", "default": null}, "name": {"description": "diff column name, defaults to &quot;Diff&quot;\n", "type": "str, optional\n", "default": "&quot;Diff&quot;\n"}}, "raises": {}, "return": {"name": "", "type": ""}}, "diffp": {"funcdef": "def diffp(self, diffcol: str, name: str = \"Diff\", doround=True) -> None", "description": "Add a diff column to the main dataframe: calculate the diff\n", "long_description": "from the previous value\n", "example": null, "params": {"diffcol": {"description": "column to diff from\n", "type": "str\n", "default": null}, "name": {"description": "diff column name, defaults to &quot;Diff&quot;\n", "type": "str, optional\n", "default": "&quot;Diff&quot;\n"}}, "raises": {}, "return": {"name": "", "type": ""}}, "diffpp": {"funcdef": "def diffpp(self, diffcol: str, name: str = \"Diff\", doround=True) -> None", "description": "Add a diff column to the main dataframe: calculate the diff\n", "long_description": "in percentage from the previous value\n", "example": null, "params": {"diffcol": {"description": "column to diff from\n", "type": "str\n", "default": null}, "name": {"description": "diff column name, defaults to &quot;Diff&quot;\n", "type": "str, optional\n", "default": "&quot;Diff&quot;\n"}}, "raises": {}, "return": {"name": "", "type": ""}}, "diffm": {"funcdef": "def diffm", "description": "Add a diff column to the main dataframe: calculate the\n", "long_description": "diff from the column mean\n", "example": null, "params": {"diffcol": {"description": "column to diff from\n", "type": "str\n", "default": null}, "name": {"description": "str, optional\n", "type": null, "default": null}, "default": {"description": "optional\n", "type": null, "default": null}}, "raises": {}, "return": {"name": "", "type": ""}}, "diffmp": {"funcdef": "def diffmp", "description": "Add a diff column to the main dataframe: calculate the\n", "long_description": "diff in percentage from the column mean\n", "example": null, "params": {"diffcol": {"description": "column to diff from\n", "type": "str\n", "default": null}, "name": {"description": "str, optional\n", "type": null, "default": null}, "default": {"description": "optional\n", "type": null, "default": null}}, "raises": {}, "return": {"name": "", "type": ""}}, "bokeh": {"funcdef": "def bokeh(self) -> None", "description": "Use the Bokeh charts engine\n", "long_description": null, "example": null, "params": {}, "raises": {}, "return": {"name": "", "type": ""}}, "altair": {"funcdef": "def altair(self) -> None", "description": "Use the Altair charts engine\n", "long_description": null, "example": null, "params": {}, "raises": {}, "return": {"name": "", "type": ""}}, "axis": {"funcdef": "def axis(self, x_axis_col: str, y_axis_col: str)", "description": "Set the columns to use for the chart x and y axis\n", "long_description": null, "example": null, "params": {"x_axis_col": {"description": "name of the column to use for x axis chart\n", "type": "str\n", "default": null}, "y_axis_col": {"description": "name of the column to use for y axis chart\n", "type": "str\n", "default": null}}, "raises": {}, "return": {"name": "", "type": ""}}, "line_": {"funcdef": "def line_(self, *args, **kwargs) -> ChartType", "description": "Draw a line chart\n", "long_description": null, "example": null, "params": {"x_axis_col": {"description": "name of the column to use for x axis chart, defaults\nto the x axis value set by ds.axis\n", "type": "Optional[str]\n", "default": null}, "y_axis_col": {"description": "name of the column to use for y axis chart, defaults\nto the y axis value set by ds.axis\n", "type": "Optional[str]\n", "default": null}}, "raises": {}, "return": {"name": null, "type": "an Altair or Bokeh chart\n"}}, "point_": {"funcdef": "def point_(self, *args, **kwargs) -> ChartType", "description": "Draw a point chart\n", "long_description": null, "example": null, "params": {}, "raises": {}, "return": {"name": null, "type": "Bokeh or Altair chart\n"}}, "bar_": {"funcdef": "def bar_(self, *args, **kwargs) -> ChartType", "description": "Draw a bar chart\n", "long_description": null, "example": null, "params": {}, "raises": {}, "return": {"name": null, "type": "Bokeh or Altair chart\n"}}, "square_": {"funcdef": "def square_(self, *args, **kwargs) -> ChartType", "description": "Draw a square chart with numbers. Only for Altair\n", "long_description": null, "example": null, "params": {}, "raises": {}, "return": {"name": null, "type": "Altair chart\n"}}, "rule_": {"funcdef": "def rule_(self, *args, **kwargs) -> ChartType", "description": "Draw a rule chart with numbers. Only for Altair\n", "long_description": null, "example": null, "params": {}, "raises": {}, "return": {"name": null, "type": "Altair chart\n"}}, "tick_": {"funcdef": "def tick_(self, *args, **kwargs) -> ChartType", "description": "Draw a square chart with numbers. Only for Altair\n", "long_description": null, "example": null, "params": {}, "raises": {}, "return": {"name": null, "type": "Altair chart\n"}}, "bar_num_": {"funcdef": "def bar_num_(self, *args, **kwargs) -> ChartType", "description": "Draw a bar chart with numbers. Only for Altair\n", "long_description": null, "example": null, "params": {}, "raises": {}, "return": {"name": null, "type": "Altair chart\n"}}, "line_num_": {"funcdef": "def line_num_(self, *args, **kwargs) -> ChartType", "description": "Draw a line chart with numbers. Only for Altair\n", "long_description": null, "example": null, "params": {}, "raises": {}, "return": {"name": null, "type": "Altair chart\n"}}, "point_num_": {"funcdef": "def point_num_(self, *args, **kwargs) -> ChartType", "description": "Draw a point chart with numbers. Only for Altair\n", "long_description": null, "example": null, "params": {}, "raises": {}, "return": {"name": null, "type": "Altair chart\n"}}, "area_": {"funcdef": "def area_(self, *args, **kwargs) -> ChartType", "description": "Draw an area chart\n", "long_description": null, "example": null, "params": {}, "raises": {}, "return": {"name": null, "type": "Bokeh or Altair chart\n"}}, "heatmap_": {"funcdef": "def heatmap_(self, *args, **kwargs) -> ChartType", "description": "Draw a heatmap chart\n", "long_description": null, "example": null, "params": {}, "raises": {}, "return": {"name": null, "type": "Bokeh or Altair chart\n"}}, "hist_": {"funcdef": "def hist_(self, *args, **kwargs) -> ChartType", "description": "Draw a histogram chart\n", "long_description": null, "example": null, "params": {}, "raises": {}, "return": {"name": null, "type": "Bokeh or Altair chart\n"}}, "hline_": {"funcdef": "def hline_(self, *args, **kwargs) -> ChartType", "description": "Draw an horizontal mean line for the y axis\n", "long_description": null, "example": null, "params": {}, "raises": {}, "return": {"name": null, "type": "Bokeh or Altair chart\n"}}, "w": {"funcdef": "def w(self, v: int)", "description": "Set the default width of charts\n", "long_description": null, "example": null, "params": {"v": {"description": "the width to set, in pixel\n", "type": "int\n", "default": null}}, "raises": {}, "return": {"name": "", "type": ""}}, "h": {"funcdef": "def h(self, v: int)", "description": "Set the default width of charts\n", "long_description": null, "example": null, "params": {"v": {"description": "the height to set, in pixel\n", "type": "int\n", "default": null}}, "raises": {}, "return": {"name": "", "type": ""}}, "wh": {"funcdef": "def wh(self, w: int, h: int)", "description": "Set the default width and height of charts\n", "long_description": null, "example": null, "params": {"w": {"description": "the height to set, in pixel\n", "type": "int\n", "default": null}, "h": {"description": "the height to set, in pixel\n", "type": "int\n", "default": null}}, "raises": {}, "return": {"name": "", "type": ""}}, "export_csv": {"funcdef": "def export_csv(self, filepath: str, **kwargs) -> None", "description": "Write the main dataframe to a csv file\n", "long_description": null, "example": null, "params": {"filepath": {"description": "path of the file to save\n", "type": "str\n", "default": null}, "**kwargs": {"description": "arguments to pass to <tt class=\"docutils literal\">pd.to_csv</tt>\n", "type": null, "default": null}}, "raises": {}, "return": {"name": "", "type": ""}}, "report_path": {"funcdef": "def report_path(self, path: str)", "description": "Set the report path folder\n", "long_description": null, "example": null, "params": {"path": {"description": "the path where to save reports: relative or absolute\n", "type": "str\n", "default": null}}, "raises": {}, "return": {"name": "", "type": ""}}, "stack": {"funcdef": "def stack", "description": "Store a chart in the report stack\n", "long_description": null, "example": null, "params": {"chart": {"description": "a chart object\n", "type": "ChartType\n", "default": null}, "title": {"description": "the chart title, defaults to None\n", "type": "Optional[str], optional\n", "default": "None\n"}, "description": {"description": "the chart description, defaults to None\n", "type": "Optional[str], optional\n", "default": "None\n"}}, "raises": {}, "return": {"name": "", "type": ""}}, "save_pdf": {"funcdef": "def save_pdf(self, filename: str, clear_stack=True)", "description": "Save a report to a pdf file\n", "long_description": null, "example": null, "params": {"filename": {"description": "the filename\n", "type": "str\n", "default": null}, "clear_stack": {"description": "clear the reporting stack, defaults to True\n", "type": "bool, optional\n", "default": "True\n"}}, "raises": {}, "return": {"name": "", "type": ""}}, "save_html": {"funcdef": "def save_html(self, info=False, clear_stack=True)", "description": "Save a report to html files\n", "long_description": null, "example": null, "params": {"info": {"description": "print info about the html headers, defaults to False\n", "type": "bool, optional\n", "default": "False\n"}, "clear_stack": {"description": "clear the reporting stack, defaults to True\n", "type": "bool, optional\n", "default": "True\n"}}, "raises": {}, "return": {"name": "", "type": ""}}}