{"w": {"funcdef": "def w(self, v: int) -> \"AltairChart\"", "description": "Set the width of the chart\n", "long_description": "", "example": "ds = await load_dataset(\"sp500\")\nds.axis(\"date:T\", \"price:Q\")\nds.line_().w(500)", "params": {"v": {"description": "value in pixels\n", "type": "int\n", "default": null}}, "raises": {}, "return": {"name": null, "type": "Chart\n"}}, "h": {"funcdef": "def h(self, v: int) -> \"AltairChart\"", "description": "Set the height of the chart\n", "long_description": "", "example": "ds = await load_dataset(\"sp500\")\nds.axis(\"date:T\", \"price:Q\")\nds.line_().h(200)", "params": {"v": {"description": "value in pixels\n", "type": "int\n", "default": null}}, "raises": {}, "return": {"name": null, "type": "Chart\n"}}, "wh": {"funcdef": "def wh(self, w: int, h: int) -> \"AltairChart\"", "description": "Set the width and height of a chart\n", "long_description": "", "example": "ds = await load_dataset(\"sp500\")\nds.axis(\"date:T\", \"price:Q\")\nds.line_().wh(500, 200)", "params": {"w": {"description": "width value in pixels\n", "type": "int\n", "default": null}, "h": {"description": "height value in pixels\n", "type": "int\n", "default": null}}, "raises": {}, "return": {"name": null, "type": "Chart\n"}}, "mw": {"funcdef": "def mw(self, v: int) -> \"AltairChart\"", "description": "Configure the default mark width\n", "long_description": "", "example": "ds = await load_dataset(\"sp500\")\nds.axis(\"date:T\", \"price:Q\")\nds.bar_().mw(7)", "params": {"v": {"description": "width value in pixels\n", "type": "int\n", "default": null}}, "raises": {}, "return": {"name": null, "type": "Chart\n"}}, "pw": {"funcdef": "def pw(self, v: int) -> \"AltairChart\"", "description": "Configure the default point width\n", "long_description": "", "example": "ds = await load_dataset(\"sp500\")\nds.axis(\"date:T\", \"price:Q\")\nds.point_().pw(25)", "params": {"v": {"description": "width value in pixels\n", "type": "int\n", "default": null}}, "raises": {}, "return": {"name": null, "type": "Chart\n"}}, "color": {"funcdef": "def color(self, v: str) -> \"AltairChart\"", "description": "Configure the chart color\n", "long_description": "", "example": "ds = await load_dataset(\"sp500\")\nds.axis(\"date:T\", \"price:Q\")\nds.area_().color(\"forestgreen\")", "params": {"v": {"description": "the color value\n", "type": "str\n", "default": null}}, "raises": {}, "return": {"name": null, "type": "Chart\n"}}, "opacity": {"funcdef": "def opacity(self, v: Union[int, float]) -> \"AltairChart\"", "description": "Configure the chart opacity\n", "long_description": "", "example": "ds = await load_dataset(\"sp500\")\nds.axis(\"date:T\", \"price:Q\")\nds.point_().opacity(0.5)", "params": {"v": {"description": "the opacity value\n", "type": "Union[int, float]\n", "default": null}}, "raises": {}, "return": {"name": null, "type": "Chart\n"}}, "tooltip": {"funcdef": "def tooltip(self, v: Union[str, List[str]]) -> \"AltairChart\"", "description": "Configure a tooltip on hover for some colums\n", "long_description": "The tooltip shows up when the user cursor goes\nover the datapoint on the chart\n", "example": "ds = await load_dataset(\"sp500\")\nds.point_(\"date:T\", \"price:Q\").tooltip([\"date\",\"price\"])", "params": {"v": {"description": "column or list of columns to use for the tooltip\n", "type": "Union[str, List[str]]\n", "default": null}}, "raises": {}, "return": {"name": null, "type": "Chart\n"}}, "to": {"funcdef": "def to(self, v: str) -> \"AltairChart\"", "description": "Change the chart type for an existing chart (only for the Altair engine)\n", "long_description": null, "example": null, "params": {"v": {"description": "the new chart type\n", "type": "str\n", "default": null}}, "raises": {}, "return": {"name": null, "type": "Chart\n"}}, "rx": {"funcdef": "def rx(self, v=-45) -> \"AltairChart\"", "description": "Rotate the chart x labels\n", "long_description": null, "example": null, "params": {"v": {"description": "angle of rotation to use, defaults to -45\n", "type": "int, optional\n", "default": "-45\n"}}, "raises": {}, "return": {"name": null, "type": "Chart\n"}}, "nox": {"funcdef": "def nox(self) -> \"AltairChart\"", "description": "Remove the x axis labels\n", "long_description": "", "example": "ds = await load_dataset(\"timeserie\")\nds.axis(\"date:T\", \"data:Q\")\n(ds.line_().nox() + ds.point_().nox())", "params": {}, "raises": {}, "return": {"name": null, "type": "Chart\n"}}, "noy": {"funcdef": "def noy(self) -> \"AltairChart\"", "description": "Remove the y axis labels\n", "long_description": "", "example": "ds = await load_dataset(\"timeserie\")\nds.axis(\"date:T\", \"data:Q\")\n(ds.line_().noy() + ds.point_().noy())", "params": {}, "raises": {}, "return": {"name": null, "type": "Chart\n"}}, "title": {"funcdef": "def title(self, v: str) -> \"AltairChart\"", "description": "Add a text title to the chart\n", "long_description": "", "example": "ds = await load_dataset(\"timeserie\")\nds.area_(\"date:T\", \"data:Q\").title(\"The chart title\")", "params": {"v": {"description": "the title text\n", "type": "str\n", "default": null}}, "raises": {}, "return": {"name": null, "type": "Chart\n"}}, "colormap": {"funcdef": "def colormap(self, column: str, **kwargs) -> \"AltairChart\"", "description": "Add a values based colormap to the chart\n", "long_description": null, "example": null, "params": {"column": {"description": "the column to use\n", "type": "str\n", "default": null}, "kwargs": {"description": "the colors and values map to use\n", "type": "Dict[str,str]\n", "default": null}}, "raises": {"ArgumentError": "raised if less than two colors are provided"}, "return": {"name": null, "type": "Chart\n"}}, "qcolormap": {"funcdef": "def qcolormap(self, column: str, **kwargs) -> \"AltairChart\"", "description": "Add a quantiles based colormap to the chart\n", "long_description": null, "example": null, "params": {"column": {"description": "the column to use\n", "type": "str\n", "default": null}, "kwargs": {"description": "the colors and values map to use\n", "type": "Dict[str,str]\n", "default": null}}, "raises": {"ArgumentError": "raised if less than two colors are provided"}, "return": {"name": null, "type": "Chart\n"}}, "save_img": {"funcdef": "def save_img(self, path: str)", "description": "Save the chart to a png image\n", "long_description": null, "example": null, "params": {"path": {"description": "the filepath\n", "type": "str\n", "default": null}}, "raises": {}, "return": {"name": "", "type": ""}}}