{"w": {"lang": "python", "funcdef": "def w(\n\tself,\n\tv: int\n) -> 'AltairChart'", "description": "Set the width of the chart.", "long_description": null, "example": {"code": "# Use this method to set the width of a chart to 500 pixels:\nchart = ds.line_()\nchart.w(500)", "is_executable": false, "description": ""}, "params": {"v": {"description": "Value in pixels.", "type": "int", "default": null}}, "raises": [], "returns": {"description": "The chart object.", "type": "AltairChart"}}, "h": {"lang": "python", "funcdef": "def h(\n\tself,\n\tv: int\n) -> 'AltairChart'", "description": "Set the height of the chart.", "long_description": null, "example": {"code": "# Use this method to set the height of a chart to 200 pixels:\nchart = ds.line_()\nchart.h(200)", "is_executable": false, "description": ""}, "params": {"v": {"description": "Value in pixels.", "type": "int", "default": null}}, "raises": [], "returns": {"description": "The chart object.", "type": "AltairChart"}}, "wh": {"lang": "python", "funcdef": "def wh(\n\tself,\n\tw: int,\n\th: int\n) -> 'AltairChart'", "description": "Set the width and height of a chart.", "long_description": null, "example": {"code": "# Use this method to set the width and height of a chart:\nchart = ds.line_()\nchart.wh(500, 200)", "is_executable": false, "description": ""}, "params": {"w": {"description": "Width value in pixels.", "type": "int", "default": null}, "h": {"description": "Height value in pixels.", "type": "int", "default": null}}, "raises": [], "returns": {"description": "The chart object.", "type": "AltairChart"}}, "mw": {"lang": "python", "funcdef": "def mw(\n\tself,\n\tv: int\n) -> 'AltairChart'", "description": "Configure the default mark width.", "long_description": null, "example": {"code": "# Use this method to configure the default mark width:\nchart = ds.bar_()\nchart.mw(7)", "is_executable": false, "description": ""}, "params": {"v": {"description": "Width value in pixels.", "type": "int", "default": null}}, "raises": [], "returns": {"description": "The chart object.", "type": "AltairChart"}}, "pw": {"lang": "python", "funcdef": "def pw(\n\tself,\n\tv: int\n) -> 'AltairChart'", "description": "Configure the default point width.", "long_description": null, "example": {"code": "# Use this method to configure the default point width:\nchart = ds.point_()\nchart.pw(25)", "is_executable": false, "description": ""}, "params": {"v": {"description": "Width value in pixels.", "type": "int", "default": null}}, "raises": [], "returns": {"description": "The chart object.", "type": "AltairChart"}}, "color": {"lang": "python", "funcdef": "def color(\n\tself,\n\tv: str\n) -> 'AltairChart'", "description": "Configure the chart color.", "long_description": null, "example": {"code": "# Use this method to configure the chart color:\nchart = ds.area_()\nchart.color(\"forestgreen\")", "is_executable": false, "description": ""}, "params": {"v": {"description": "The color value.", "type": "str", "default": null}}, "raises": [], "returns": {"description": "The chart object.", "type": "AltairChart"}}, "opacity": {"lang": "python", "funcdef": "def opacity(\n\tself,\n\tv: Union[int, float]\n) -> 'AltairChart'", "description": "Configure the chart opacity.", "long_description": null, "example": {"code": "# Use this method to configure the chart opacity:\nchart = ds.point_()\nchart.opacity(0.5)", "is_executable": false, "description": ""}, "params": {"v": {"description": "The opacity value.", "type": "Union[int, float]", "default": null}}, "raises": [], "returns": {"description": "The chart object.", "type": "AltairChart"}}, "tooltip": {"lang": "python", "funcdef": "def tooltip(\n\tself,\n\tv: Union[str, List[str]]\n) -> 'AltairChart'", "description": "Configure a tooltip on hover for some columns.", "long_description": "The tooltip shows up when the user cursor goes\nover the datapoint on the chart.", "example": {"code": "# Use this method to configure a tooltip for some columns:\nchart = ds.point_()\nchart.tooltip([\"date\", \"price\"])", "is_executable": false, "description": ""}, "params": {"v": {"description": "Column or list of columns to use for the tooltip.", "type": "Union[str, List[str]]", "default": null}}, "raises": [], "returns": {"description": "The chart object.", "type": "AltairChart"}}, "to": {"lang": "python", "funcdef": "def to(\n\tself,\n\tv: str\n) -> 'AltairChart'", "description": "Change the chart type for an existing chart (only for the Altair engine).", "long_description": null, "example": {"code": "# Use this method to change the chart type:\nchart = ds.line_()\nchart.to(\"area\")", "is_executable": false, "description": ""}, "params": {"v": {"description": "The new chart type.", "type": "str", "default": null}}, "raises": [], "returns": {"description": "The chart object.", "type": "AltairChart"}}, "rx": {"lang": "python", "funcdef": "def rx(\n\tself,\n\tv\n) -> 'AltairChart'", "description": "Rotate the chart x labels.", "long_description": null, "example": {"code": "# Use this method to rotate the x labels:\nchart = ds.line_()\nchart = chart.rx(-45)", "is_executable": false, "description": ""}, "params": {"v": {"description": "Angle of rotation to use. Defaults to -45.", "type": "int", "default": "-45"}}, "raises": [], "returns": {"description": "The chart object.", "type": "AltairChart"}}, "nox": {"lang": "python", "funcdef": "def nox(\n\tself\n) -> 'AltairChart'", "description": "Remove the x-axis labels.", "long_description": null, "example": {"code": "# Use this method to remove the x-axis labels:\nds.line_().nox() + ds.point_().nox()", "is_executable": false, "description": ""}, "params": {}, "raises": [], "returns": {"description": "The chart object.", "type": "AltairChart"}}, "noy": {"lang": "python", "funcdef": "def noy(\n\tself\n) -> 'AltairChart'", "description": "Remove the y-axis labels.", "long_description": null, "example": {"code": "# Use this method to remove the y-axis labels:\nds.line_().noy() + ds.point_().noy()", "is_executable": false, "description": ""}, "params": {}, "raises": [], "returns": {"description": "The chart object.", "type": "AltairChart"}}, "title": {"lang": "python", "funcdef": "def title(\n\tself,\n\tv: str\n) -> 'AltairChart'", "description": "Add a text title to the chart.", "long_description": null, "example": {"code": "# Use this method to add a title to the chart:\nds.area_(\"date:T\", \"data:Q\").title(\"The chart title\")", "is_executable": false, "description": ""}, "params": {"v": {"description": "The title text.", "type": "str", "default": null}}, "raises": [], "returns": {"description": "The chart object.", "type": "AltairChart"}}, "colormap": {"lang": "python", "funcdef": "def colormap(\n\tself,\n\tcolumn: str,\n\t**kwargs\n) -> 'AltairChart'", "description": "Add a values-based colormap to the chart.", "long_description": null, "example": {"code": "# Use this method to add a colormap to the chart:\nds.point_().colormap(\"Origin\", Japan=\"red\", Europe=\"green\", USA=\"blue\")", "is_executable": false, "description": ""}, "params": {"column": {"description": "The column to use for the colormap.", "type": "str", "default": null}, "**kwargs": {"description": "The colors and values map to use.", "type": null, "default": null}}, "raises": [{"description": "Raised if less than two colors are provided.", "type": "ArgumentError"}], "returns": {"description": "The chart object.", "type": "AltairChart"}}, "qcolormap": {"lang": "python", "funcdef": "def qcolormap(\n\tself,\n\tcolumn: str,\n\t**kwargs\n) -> 'AltairChart'", "description": "Add a quantiles-based colormap to the chart.", "long_description": null, "example": {"code": "# Use this method to add a quantiles-based colormap to the chart:\nds.axis(\"Horsepower:Q\", \"Miles_per_Gallon:Q\")\nchart = ds.point_().qcolormap(\"Origin\", low=0.2, high=0.8, Japan=\"red\", Europe=\"green\", USA=\"blue\")", "is_executable": false, "description": ""}, "params": {"column": {"description": "The column to use for the colormap.", "type": "str", "default": null}, "**kwargs": {"description": "The quantile values and colors map to use.", "type": null, "default": null}}, "raises": [{"description": "Raised if less than two colors are provided.", "type": "ArgumentError"}], "returns": {"description": "The chart object.", "type": "AltairChart"}}, "save_img": {"lang": "python", "funcdef": "def save_img(\n\tself,\n\tpath: str\n)", "description": "Save the chart to a png image.", "long_description": null, "example": null, "params": {"path": {"description": "The filepath.", "type": "str", "default": null}}, "raises": [], "returns": null}, "get_html_": {"lang": "python", "funcdef": "def get_html_(\n\tself\n) -> str", "description": "Get HTML for an Altair chart.", "long_description": null, "example": null, "params": {}, "raises": [], "returns": {"description": "The HTML string representing the chart.", "type": "str"}}, "html_header_": {"lang": "python", "funcdef": "def html_header_(\n\t\n)", "description": "Returns the HTML script tags", "long_description": null, "example": null, "params": {}, "raises": [], "returns": {"description": "The HTML script tags", "type": "str"}}}