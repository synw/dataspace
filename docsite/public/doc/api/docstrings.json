{"show": {"lang": "python", "funcdef": "def show(\n\tself,\n\trows: int\n) -> pl.DataFrame", "description": "Displays information about the DataFrame.", "long_description": null, "example": {"code": "ds.show()", "is_executable": false, "description": ""}, "params": {"rows": {"description": "The number of rows to show. Defaults to 5.", "type": "int", "default": "5"}}, "raises": [], "returns": {"description": "A head of the DataFrame.", "type": "pl.DataFrame"}}, "to_date": {"lang": "python", "funcdef": "def to_date(\n\tself,\n\t*cols: str\n)", "description": "Converts some column values to date type.", "long_description": null, "example": {"code": "ds.to_date(\"mycol\")", "is_executable": false, "description": ""}, "params": {"cols": {"description": "The name(s) of the column(s) to convert.", "type": "str", "default": null}, "fmt": {"description": "The date parsing format to use", "type": "str", "default": null}}, "raises": [], "returns": null}, "to_tzdate": {"lang": "python", "funcdef": "def to_tzdate(\n\tself,\n\t*cols: str\n)", "description": "Converts some column values to date type from ISO string         with timezone info.", "long_description": null, "example": {"code": "ds.to_date(\"mycol\")", "is_executable": false, "description": ""}, "params": {"cols": {"description": "The name(s) of the column(s) to convert.", "type": "str", "default": null}}, "raises": [], "returns": null}, "to_int": {"lang": "python", "funcdef": "def to_int(\n\tself,\n\t*cols: str\n)", "description": "Converts some column values to integers.", "long_description": null, "example": {"code": "ds.to_int(\"mycol1\", \"mycol2\")", "is_executable": false, "description": ""}, "params": {"*cols": {"description": "The name(s) of the column(s) to convert.", "type": "str", "default": null}}, "raises": [], "returns": null}, "to_float": {"lang": "python", "funcdef": "def to_float(\n\tself,\n\t*cols: str\n)", "description": "Converts column values to floats.", "long_description": null, "example": {"code": "ds.to_float(\"mycol1\")", "is_executable": false, "description": ""}, "params": {"cols": {"description": "The name(s) of the column(s) to convert.", "type": "str", "default": null}}, "raises": [], "returns": null}, "to_str": {"lang": "python", "funcdef": "def to_str(\n\tself,\n\t*cols: str\n)", "description": "Converts column values to strings.", "long_description": null, "example": {"code": "ds.to_str(\"mycol1\")", "is_executable": false, "description": ""}, "params": {"cols": {"description": "The name(s) of the column(s) to convert.", "type": "str", "default": null}}, "raises": [], "returns": null}, "to_type": {"lang": "python", "funcdef": "def to_type(\n\tself,\n\tdtype: pl.DataType,\n\t*cols: str\n)", "description": "Converts column values to a given Polars datatype in the main DataFrame.", "long_description": null, "example": {"code": "ds.to_type(pl.Utf8, \"mycol\")", "is_executable": false, "description": ""}, "params": {"dtype": {"description": "The data type to convert to.", "type": "pl.DataType", "default": null}, "*cols": {"description": "The name(s) of the column(s) to convert.", "type": "str", "default": null}}, "raises": [], "returns": null}, "drop_na": {"lang": "python", "funcdef": "def drop_na(\n\tself,\n\t*cols: str\n)", "description": "Drop rows that contain any null values in the         specified columns.", "long_description": null, "example": {"code": "ds.drop_any_nulls(\"mycol\")", "is_executable": false, "description": ""}, "params": {"*cols": {"description": "A variable number of string arguments representing the column\nnames to check for null values.", "type": null, "default": null}}, "raises": [], "returns": null}, "drop_any_nulls": {"lang": "python", "funcdef": "def drop_any_nulls(\n\tself,\n\t*cols: str\n)", "description": "Drop rows that contain any null values in the         specified columns.", "long_description": null, "example": {"code": "ds.drop_any_nulls(\"mycol\")", "is_executable": false, "description": ""}, "params": {"*cols": {"description": "A variable number of string arguments representing the column\nnames to check for null values.", "type": null, "default": null}}, "raises": [], "returns": null}, "drop_all_nulls": {"lang": "python", "funcdef": "def drop_all_nulls(\n\tself\n)", "description": "Drop rows where all values are null", "long_description": null, "example": {"code": "ds.drop_all_nulls()", "is_executable": false, "description": ""}, "params": {"*cols": {"description": "A variable number of string arguments representing the column\nnames to check for null values.", "type": null, "default": null}}, "raises": [], "returns": null}, "fill_nulls": {"lang": "python", "funcdef": "def fill_nulls(\n\tself,\n\t*cols: str\n)", "description": "Replace null (missing or empty) values in the specified columns with a given value.", "long_description": null, "example": {"code": "ds.fill_nulls(\"mycol\")", "is_executable": false, "description": ""}, "params": {"*cols": {"description": "One or more column names to replace nulls in.", "type": "str", "default": null}, "val": {"description": "The value to replace nulls with. Defaults to None.", "type": "any", "default": "None"}, "nulls": {"description": "The list of null values to replace. Defaults to [None].", "type": "list", "default": "[None]"}}, "raises": [{"description": "If any of the specified column names are not found in the\nDataFrame.", "type": "ValueError"}], "returns": {"description": "None", "type": null}}, "fdate": {"lang": "python", "funcdef": "def fdate(\n\tself,\n\t*cols\n)", "description": "Converts specified columns to formatted date strings.", "long_description": null, "example": {"code": "ds.fdate(\"mycol1\", \"mycol2\")", "is_executable": false, "description": ""}, "params": {"cols": {"description": "Names of columns to convert to formatted date strings.", "type": "str", "default": null}, "precision": {"description": "Precision level of date format string.\nDefaults to \"S\" (seconds).\nPossible values: \"S\" (seconds), \"Min\" (minutes), \"H\" (hours), \"D\" (days),\n\"M\" (months), \"Y\" (years).", "type": "str", "default": null}, "newcol": {"description": "Name of the new column to create. Defaults to \"fdate\".", "type": null, "default": "\"fdate\""}}, "raises": [], "returns": null}, "timestamps": {"lang": "python", "funcdef": "def timestamps(\n\tself,\n\t*cols: str\n)", "description": "Adds a new column with timestamps from one or more specified date columns.", "long_description": null, "example": {"code": "ds.timestamps(\"mycol\")", "is_executable": false, "description": ""}, "params": {"*cols": {"description": "Names of columns to convert to timestamps.", "type": "str", "default": null}, "name": {"description": "Name of the new column to create. Defaults to \"timestamps\".", "type": "str", "default": "\"timestamps\""}}, "raises": [], "returns": null}, "strip": {"lang": "python", "funcdef": "def strip(\n\tself,\n\t*cols: str\n)", "description": "Removes leading and trailing white spaces from the         values in the specified columns.", "long_description": null, "example": {"code": "ds.strip(\"mycol\")", "is_executable": false, "description": ""}, "params": {"*cols": {"description": "Names of columns to strip", "type": "str", "default": null}}, "raises": [], "returns": null}, "strip_cols": {"lang": "python", "funcdef": "def strip_cols(\n\tself\n)", "description": "Remove leading and trailing white spaces in columns names", "long_description": null, "example": {"code": "ds.strip_cols()", "is_executable": false, "description": ""}, "params": {}, "raises": [], "returns": null}, "roundvals": {"lang": "python", "funcdef": "def roundvals(\n\tself,\n\tcol: str,\n\tprecision: int\n)", "description": "Rounds the values in the specified column to the specified float precision.", "long_description": null, "example": {"code": "ds.roundvals(\"mycol\")", "is_executable": false, "description": ""}, "params": {"col": {"description": "Name of the column to round.", "type": "str", "default": null}, "precision": {"description": "Number of decimal places to round to. Defaults to 2.", "type": "int", "default": "2"}}, "raises": [], "returns": null}, "replace": {"lang": "python", "funcdef": "def replace(\n\tself,\n\tcol: str,\n\tsearchval: Any,\n\treplaceval: Any\n)", "description": "Replaces all occurrences of a value in the specified column with a new value.", "long_description": null, "example": {"code": "ds.replace(\"mycol\", \"value\", \"new_value\")", "is_executable": false, "description": ""}, "params": {"col": {"description": "Name of the column to search.", "type": "str", "default": null}, "searchval": {"description": "Value to replace.", "type": "str", "default": null}, "replaceval": {"description": "New value to replace `searchval` with.", "type": "str", "default": null}}, "raises": [], "returns": null}, "indexcol": {"lang": "python", "funcdef": "def indexcol(\n\tself,\n\tcol: str\n)", "description": "Add an index column with a number incremented", "long_description": null, "example": {"code": "ds.indexcol()", "is_executable": false, "description": ""}, "params": {"col": {"description": "name of the column. Defaults to \"index\".", "type": "str", "default": "\"index\""}}, "raises": [], "returns": null}, "limit": {"lang": "python", "funcdef": "def limit(\n\tself,\n\tr: int\n)", "description": "Limits the number of rows in the DataFrame to the specified number.", "long_description": null, "example": {"code": "ds.limit(100)", "is_executable": false, "description": ""}, "params": {"r": {"description": "Number of rows to keep. Defaults to 5.", "type": "int", "default": "5"}}, "raises": [], "returns": null}, "unique_": {"lang": "python", "funcdef": "def unique_(\n\tself,\n\tcol: str\n) -> List[str]", "description": "Returns a list of unique values in the specified column.", "long_description": null, "example": {"code": "ds.unique_(\"col1\")", "is_executable": false, "description": ""}, "params": {"col": {"description": "Name of the column to select from.", "type": "str", "default": null}}, "raises": [], "returns": {"description": "A list of unique values in the column.", "type": "list"}}, "wunique_": {"lang": "python", "funcdef": "def wunique_(\n\tself,\n\tcol: str,\n\tcolname: str\n) -> pl.DataFrame", "description": "Returns a dataframe object with a count of unique values in the specified column.", "long_description": null, "example": {"code": "ds.wunique_(\"col1\")", "is_executable": false, "description": ""}, "params": {"col": {"description": "Name of the column to select from.", "type": "str", "default": null}, "colname": {"description": "Name of the new column containing the unique counts.\nDefaults to \"Number\".", "type": "str", "default": null}}, "raises": [], "returns": null}, "count_null_": {"lang": "python", "funcdef": "def count_null_(\n\tself,\n\tcol: str\n) -> int", "description": "Counts the number of null values in the specified column.", "long_description": null, "example": {"code": "ds.count_nulls_(\"col1\")", "is_executable": false, "description": ""}, "params": {"col": {"description": "Name of the column to count from.", "type": "str", "default": null}}, "raises": [], "returns": {"description": "The number of null values in the column.", "type": "int"}}, "count_empty_": {"lang": "python", "funcdef": "def count_empty_(\n\tself,\n\tcol: str\n) -> int", "description": "Counts the number of empty values in the specified column.", "long_description": null, "example": {"code": "ds.count_empty_(\"col1\")", "is_executable": false, "description": ""}, "params": {"col": {"description": "Name of the column to count from.", "type": "str", "default": null}}, "raises": [], "returns": {"description": "The number of empty values in the column.", "type": "int"}}, "count_zero_": {"lang": "python", "funcdef": "def count_zero_(\n\tself,\n\tcol: str\n) -> int", "description": "Counts the number of zero values in the specified column.", "long_description": null, "example": {"code": "ds.count_zero_(\"col1\")", "is_executable": false, "description": ""}, "params": {"col": {"description": "Name of the column to count from.", "type": "str", "default": null}}, "raises": [], "returns": {"description": "The number of zero values in the column.", "type": "int"}}, "count_unique_": {"lang": "python", "funcdef": "def count_unique_(\n\tself,\n\tcol: str\n) -> int", "description": "Counts the number of unique values in the specified column.", "long_description": null, "example": {"code": "ds.count_unique_(\"col1\")", "is_executable": false, "description": ""}, "params": {"col": {"description": "Name of the column to count from.", "type": "str", "default": null}}, "raises": [], "returns": {"description": "The number of unique values in the column.", "type": "int"}}, "split_": {"lang": "python", "funcdef": "def split_(\n\tself,\n\tcol: str\n) -> Dict[str, 'DataSpace']", "description": "Splits the main dataframe object into multiple DataSpace objects,         one for each unique value in the specified column.", "long_description": null, "example": {"code": "dss = ds.split_(\"col1\")", "is_executable": false, "description": ""}, "params": {"col": {"description": "Name of the column to split by.", "type": "str", "default": null}}, "raises": [], "returns": {"description": "A dictionary with the unique values in the specified column as\nkeys and a corresponding `DataSpace` object as the value.", "type": "Dict[str, DataSpace]"}}, "sort": {"lang": "python", "funcdef": "def sort(\n\tself,\n\tcol: str\n)", "description": "Sorts the main `pl.DataFrame` object in-place according to the specified column.", "long_description": null, "example": {"code": "ds.sort(\"Col 1\")", "is_executable": false, "description": ""}, "params": {"col": {"description": "Name of the column to sort by.", "type": "str", "default": null}}, "raises": [], "returns": null}, "drop": {"lang": "python", "funcdef": "def drop(\n\tself,\n\t*cols\n)", "description": "Removes the specified columns from the main `pl.DataFrame` object in-place.", "long_description": null, "example": {"code": "ds.drop(\"Col1\", \"Col2\")", "is_executable": false, "description": ""}, "params": {"*cols": {"description": "Names of the columns to remove.", "type": "str", "default": null}}, "raises": [], "returns": null}, "rename": {"lang": "python", "funcdef": "def rename(\n\tself,\n\tsource_col: str,\n\tdest_col: str\n)", "description": "Renames a column in the main `pl.DataFrame` object in-place.", "long_description": null, "example": {"code": "ds.rename(\"Col1\", \"Newcol\")", "is_executable": false, "description": ""}, "params": {"source_col": {"description": "Name of the column to rename.", "type": "str", "default": null}, "dest_col": {"description": "New name of the column.", "type": "str", "default": null}}, "raises": [], "returns": null}, "add": {"lang": "python", "funcdef": "def add(\n\tself,\n\tcol: str,\n\tvalue: Any\n)", "description": "Adds a new column to the main `pl.DataFrame` object with the", "long_description": "specified default value.", "example": {"code": "ds.add(\"Col 4\", 0)", "is_executable": false, "description": ""}, "params": {"col": {"description": "Name of the new column.", "type": "str", "default": null}, "value": {"description": "Default value for the new column.", "type": "Any", "default": null}}, "raises": [], "returns": null}, "keep": {"lang": "python", "funcdef": "def keep(\n\tself,\n\t*cols: str\n)", "description": "Limits the main `pl.DataFrame` object to the specified columns.", "long_description": null, "example": {"code": "ds.keep(\"Col 1\", \"Col 2\")", "is_executable": false, "description": ""}, "params": {"*cols": {"description": "Names of the columns to keep.", "type": "str", "default": null}}, "raises": [], "returns": null}, "exclude": {"lang": "python", "funcdef": "def exclude(\n\tself,\n\tcol: str,\n\tval: Any\n)", "description": "Deletes all rows from the main `pl.DataFrame` object         where the specified column has the specified value.", "long_description": null, "example": {"code": "ds.exclude(\"Col1\", \"value\")", "is_executable": false, "description": ""}, "params": {"col": {"description": "Name of the column to check for the specified value.", "type": "str", "default": null}, "val": {"description": "Value to exclude rows for.", "type": "Any", "default": null}}, "raises": [], "returns": null}, "append": {"lang": "python", "funcdef": "def append(\n\tself,\n\tvals: List[Any]\n)", "description": "Append a row to the dataframe", "long_description": null, "example": {"code": "ds.append([\"a\",\"b\"])", "is_executable": false, "description": ""}, "params": {"val": {"description": "values to append to the dataframe", "type": "List[Any]", "default": null}}, "raises": [], "returns": null}, "mappend": {"lang": "python", "funcdef": "def mappend(\n\tself,\n\tvals: List[List[Any]]\n)", "description": "Append many rows to the dataframe", "long_description": null, "example": {"code": "ds.mappend([[\"a\",\"b\"], [\"c\",\"d\"])", "is_executable": false, "description": ""}, "params": {"val": {"description": "values to append to the dataframe", "type": "List[Any]", "default": null}}, "raises": [], "returns": null}, "copycol": {"lang": "python", "funcdef": "def copycol(\n\tself,\n\torigin_col: str,\n\tdest_col: str\n)", "description": "Copies the values from one column to another column", "long_description": "in the main `pl.DataFrame` object.", "example": {"code": "ds.copy(\"col1\", \"New col\")", "is_executable": false, "description": ""}, "params": {"origin_col": {"description": "Name of the column to copy values from.", "type": "str", "default": null}, "dest_col": {"description": "Name of the column to copy values to.", "type": "str", "default": null}}, "raises": [], "returns": null}, "reverse": {"lang": "python", "funcdef": "def reverse(\n\tself\n)", "description": "Reverses the main dataframe order", "long_description": null, "example": {"code": "ds.reverse()", "is_executable": false, "description": ""}, "params": {}, "raises": [], "returns": null}, "resample": {"lang": "python", "funcdef": "def resample(\n\tself,\n\tdate_col: str,\n\ttime_period: str,\n\tmcols: List[str],\n\tscols: List[str]\n)", "description": "Resamples the `pl.DataFrame` object to a specific time period.", "long_description": null, "example": {"code": "ds.resample(\"datecol\", \"1m\", mean_cols=[\"price\"], sum_cols=[\"quantity\"])", "is_executable": false, "description": ""}, "params": {"date_col": {"description": "Name of the column containing the date or datetime values.", "type": "str", "default": null}, "time_period": {"description": "Resample time period string. Possible values are:\n- \"1ns\" (1 nanosecond)\n- \"1us\" (1 microsecond)\n- \"1ms\" (1 millisecond)\n- \"1s\" (1 second)\n- \"1m\" (1 minute)\n- \"1h\" (1 hour)\n- \"1d\" (1 day)\n- \"1w\" (1 week)\n- \"1mo\" (1 calendar month)\n- \"1y\" (1 calendar year)\n- \"1i\" (1 index count)", "type": "str", "default": null}, "mcols": {"description": "List of column names to resample with the mean function.", "type": "List[str]", "default": null}, "scols": {"description": "List of column names to resample with the sum function.", "type": "List[str]", "default": null}}, "raises": [], "returns": null}, "rsum": {"lang": "python", "funcdef": "def rsum(\n\tself,\n\tdate_col: str,\n\ttime_period: str,\n\t*cols: str\n)", "description": "Resamples the `pl.DataFrame` object and sum to a specific time period.", "long_description": null, "example": {"code": "ds.rsum(\"datecol\", \"1m\", \"quantity\")", "is_executable": false, "description": ""}, "params": {"date_col": {"description": "Name of the column containing the date or datetime values.", "type": "str", "default": null}, "time_period": {"description": "Resample time period string. Possible values are:\n- \"1ns\" (1 nanosecond)\n- \"1us\" (1 microsecond)\n- \"1ms\" (1 millisecond)\n- \"1s\" (1 second)\n- \"1m\" (1 minute)\n- \"1h\" (1 hour)\n- \"1d\" (1 day)\n- \"1w\" (1 week)\n- \"1mo\" (1 calendar month)\n- \"1y\" (1 calendar year)\n- \"1i\" (1 index count)", "type": "str", "default": null}, "*cols": {"description": "column names to resample with the sum function.", "type": "str", "default": null}}, "raises": [], "returns": null}, "rmean": {"lang": "python", "funcdef": "def rmean(\n\tself,\n\tdate_col: str,\n\ttime_period: str,\n\t*cols: str\n)", "description": "Resamples the `pl.DataFrame` object and mean to a specific time period.", "long_description": null, "example": {"code": "ds.rmean(\"datecol\", \"1m\", \"price\")", "is_executable": false, "description": ""}, "params": {"date_col": {"description": "Name of the column containing the date or datetime values.", "type": "str", "default": null}, "time_period": {"description": "Resample time period string. Possible values are:\n- \"1ns\" (1 nanosecond)\n- \"1us\" (1 microsecond)\n- \"1ms\" (1 millisecond)\n- \"1s\" (1 second)\n- \"1m\" (1 minute)\n- \"1h\" (1 hour)\n- \"1d\" (1 day)\n- \"1w\" (1 week)\n- \"1mo\" (1 calendar month)\n- \"1y\" (1 calendar year)\n- \"1i\" (1 index count)", "type": "str", "default": null}, "*cols": {"description": "column names to resample with the mean function.", "type": "str", "default": null}}, "raises": [], "returns": null}, "percent": {"lang": "python", "funcdef": "def percent(\n\tself,\n\tcol: str,\n\troundn\n)", "description": "Adds a percent column to the DataFrame.", "long_description": null, "example": {"code": "ds.percent(\"amount\")", "is_executable": false, "description": ""}, "params": {"col": {"description": "The name of the column to calculate percentages from.", "type": "str", "default": null}, "roundn": {"description": "The number of decimal places to round to. Defaults to 1.", "type": "int", "default": "1"}}, "raises": [], "returns": {"description": "The DataFrame with a new column containing the percentages.", "type": "polars.DataFrame"}}, "diffp": {"lang": "python", "funcdef": "def diffp(\n\tself,\n\tdiffcol: str,\n\tname: str,\n\tdecimals\n)", "description": "Add a diff column to the main dataframe: calculate the difference", "long_description": "from the previous value.", "example": {"code": "ds.diffp(\"Col 1\", \"New col\")", "is_executable": false, "description": ""}, "params": {"diffcol": {"description": "The column name for which to calculate the difference.", "type": "str", "default": null}, "name": {"description": "The name of the resulting difference column. Defaults to \"diff\".", "type": "str", "default": "\"diff\""}, "decimals": {"description": "The number of decimal places to round the difference to. Defaults to 0.", "type": "int", "default": "0"}}, "raises": [], "returns": null}, "diffpp": {"lang": "python", "funcdef": "def diffpp(\n\tself,\n\tdiffcol: str,\n\tname: str,\n\tdecimals\n)", "description": "Add a diff column to the main dataframe: calculate the difference", "long_description": "in percentage from the previous value.", "example": {"code": "ds.diffpp(\"Col 1\", \"New col\")", "is_executable": false, "description": ""}, "params": {"diffcol": {"description": "The column name for which to calculate the difference.", "type": "str", "default": null}, "name": {"description": "The name of the resulting difference column. Defaults to \"diff\".", "type": "str", "default": "\"diff\""}, "decimals": {"description": "The number of decimal places to round the difference to. Defaults to 0.", "type": "int", "default": "0"}}, "raises": [], "returns": null}, "diffn": {"lang": "python", "funcdef": "def diffn(\n\tself,\n\tdiffcol: str,\n\tname: str,\n\tdecimals\n)", "description": "Add a diff column to the main dataframe: calculate the difference", "long_description": "from the next value.", "example": {"code": "ds.diffn(\"Col 1\", \"New col\")", "is_executable": false, "description": ""}, "params": {"diffcol": {"description": "The column name for which to calculate the difference.", "type": "str", "default": null}, "name": {"description": "The name of the resulting difference column. Defaults to \"diff\".", "type": "str", "default": "\"diff\""}, "decimals": {"description": "The number of decimal places to round the difference to. Defaults to 0.", "type": "int", "default": "0"}}, "raises": [], "returns": null}, "diffnp": {"lang": "python", "funcdef": "def diffnp(\n\tself,\n\tdiffcol: str,\n\tname: str,\n\tdecimals\n)", "description": "Add a diff column to the main dataframe: calculate the difference", "long_description": "in percentage from the next value.", "example": {"code": "ds.diffnp(\"Col 1\", \"New col\")", "is_executable": false, "description": ""}, "params": {"diffcol": {"description": "The column name for which to calculate the difference.", "type": "str", "default": null}, "name": {"description": "The name of the resulting difference column. Defaults to \"diff\".", "type": "str", "default": "\"diff\""}, "decimals": {"description": "The number of decimal places to round the difference to. Defaults to 0.", "type": "int", "default": "0"}}, "raises": [], "returns": null}, "diffm": {"lang": "python", "funcdef": "def diffm(\n\tself,\n\tdiffcol: str,\n\tname: str,\n\tdecimals\n)", "description": "Add a difference column to the main dataframe: calculate the", "long_description": "difference from the column mean.", "example": {"code": "ds.diffm(\"Col 1\", \"New col\")", "is_executable": false, "description": ""}, "params": {"diffcol": {"description": "The column name for which to calculate the difference.", "type": "str", "default": null}, "name": {"description": "The name of the resulting difference column. Defaults to \"diff\".", "type": "str", "default": "\"diff\""}, "decimals": {"description": "The number of decimal places to round the difference to. Defaults to 0.", "type": "int", "default": "0"}}, "raises": [], "returns": null}, "diffmp": {"lang": "python", "funcdef": "def diffmp(\n\tself,\n\tdiffcol: str,\n\tname: str,\n\tdecimals\n)", "description": "Add a difference column to the main dataframe: calculate the", "long_description": "difference in percentage from the column mean.", "example": {"code": "ds.diffmp(\"Col 1\", \"New col\")", "is_executable": false, "description": ""}, "params": {"diffcol": {"description": "The column name for which to calculate the difference.", "type": "str", "default": null}, "name": {"description": "The name of the resulting difference column. Defaults to \"diff\".", "type": "str", "default": "\"diff\""}, "decimals": {"description": "The number of decimal places to round the difference to. Defaults to 0.", "type": "int", "default": "0"}}, "raises": [], "returns": null}, "cvar_": {"lang": "python", "funcdef": "def cvar_(\n\tself,\n\tcol: str\n) -> float", "description": "Returns the coefficient of variation (CV) of a column in percentage.", "long_description": null, "example": {"code": "ds.cvar_(\"mycol\")", "is_executable": false, "description": ""}, "params": {"col": {"description": "The name of the column for which to calculate the coefficient of variation.", "type": "str", "default": null}}, "raises": [], "returns": {"description": "The coefficient of variation of the column in percentage.", "type": "float"}}, "lreg_": {"lang": "python", "funcdef": "def lreg_(\n\tself,\n\txcol: str,\n\tycol: str,\n\tname\n)", "description": "Add a column with the the linear regression for given x/y column", "long_description": null, "example": {"code": "ds.lreg_(\"col1\", \"col2\")", "is_executable": false, "description": ""}, "params": {"xcol": {"description": "The name of the x column for which to calculate the linear regression.", "type": "str", "default": null}, "ycol": {"description": "The name of the y column for which to calculate the linear regression.", "type": "str", "default": null}, "name": {"description": "The name of the new column. Defaults to \"regression\"", "type": "str", "default": null}}, "raises": [], "returns": null}, "bokeh": {"lang": "python", "funcdef": "def bokeh(\n\tself\n)", "description": "Use the Bokeh charts engine.", "long_description": "Important: for now to use this chart engine you must install Pandas, as\nthe Bokeh engine does not yet support Polars dataframes", "example": {"code": "ds.bokeh()", "is_executable": false, "description": ""}, "params": {}, "raises": [], "returns": null}, "altair": {"lang": "python", "funcdef": "def altair(\n\tself\n)", "description": "Use the Altair charts engine, which is the default engine.", "long_description": null, "example": {"code": "ds.altair()", "is_executable": false, "description": ""}, "params": {}, "raises": [], "returns": null}, "axis": {"lang": "python", "funcdef": "def axis(\n\tself,\n\tx_axis_col: str,\n\ty_axis_col: str\n)", "description": "Set the columns to use for the chart's x and y axis.", "long_description": null, "example": {"code": "ds.axis(\"col1\", \"col2\")", "is_executable": false, "description": ""}, "params": {"x_axis_col": {"description": "Name of the column to use for the x axis chart.", "type": "str", "default": null}, "y_axis_col": {"description": "Name of the column to use for the y axis chart.", "type": "str", "default": null}}, "raises": [], "returns": null}, "line_": {"lang": "python", "funcdef": "def line_(\n\tself,\n\t*args,\n\t**kwargs\n) -> ChartType", "description": "Draw a line chart.", "long_description": null, "example": {"code": "ds.line_()", "is_executable": false, "description": ""}, "params": {"x_axis_col": {"description": "Name of the column to use for the x axis chart,\ndefaults to the x axis value set by ds.axis.", "type": "Optional[str]", "default": null}, "y_axis_col": {"description": "Name of the column to use for the y axis chart,\ndefaults to the y axis value set by ds.axis.", "type": "Optional[str]", "default": null}}, "raises": [], "returns": {"description": "A Bokeh or Altair chart.", "type": "Union[AltairChart, HvChart]"}}, "point_": {"lang": "python", "funcdef": "def point_(\n\tself,\n\t*args,\n\t**kwargs\n) -> ChartType", "description": "Draw a point chart.", "long_description": null, "example": {"code": "ds.point_()", "is_executable": false, "description": ""}, "params": {"x_axis_col": {"description": "Name of the column to use for the x axis chart,\ndefaults to the x axis value set by ds.axis.", "type": "Optional[str]", "default": null}, "y_axis_col": {"description": "Name of the column to use for the y axis chart,\ndefaults to the y axis value set by ds.axis.", "type": "Optional[str]", "default": null}}, "raises": [], "returns": {"description": "A Bokeh or Altair chart.", "type": "Union[AltairChart, HvChart]"}}, "bar_": {"lang": "python", "funcdef": "def bar_(\n\tself,\n\t*args,\n\t**kwargs\n) -> ChartType", "description": "Draw a bar chart", "long_description": null, "example": {"code": "ds.bar_()", "is_executable": false, "description": ""}, "params": {"x_axis_col": {"description": "Name of the column to use for the x axis chart,\ndefaults to the x axis value set by ds.axis.", "type": "Optional[str]", "default": null}, "y_axis_col": {"description": "Name of the column to use for the y axis chart,\ndefaults to the y axis value set by ds.axis.", "type": "Optional[str]", "default": null}}, "raises": [], "returns": {"description": "A Bokeh or Altair chart.", "type": "Union[AltairChart, HvChart]"}}, "square_": {"lang": "python", "funcdef": "def square_(\n\tself,\n\t*args,\n\t**kwargs\n) -> ChartType", "description": "Draw a square chart with numbers. Only for Altair", "long_description": null, "example": {"code": "ds.square_()", "is_executable": false, "description": ""}, "params": {"x_axis_col": {"description": "Name of the column to use for the x axis chart,\ndefaults to the x axis value set by ds.axis.", "type": "Optional[str]", "default": null}, "y_axis_col": {"description": "Name of the column to use for the y axis chart,\ndefaults to the y axis value set by ds.axis.", "type": "Optional[str]", "default": null}}, "raises": [], "returns": {"description": "A Bokeh or Altair chart.", "type": "Union[AltairChart, HvChart]"}}, "rule_": {"lang": "python", "funcdef": "def rule_(\n\tself,\n\t*args,\n\t**kwargs\n) -> ChartType", "description": "Draw a rule chart with numbers. Only for Altair", "long_description": null, "example": {"code": "ds.rule_()", "is_executable": false, "description": ""}, "params": {"x_axis_col": {"description": "Name of the column to use for the x axis chart,\ndefaults to the x axis value set by ds.axis.", "type": "Optional[str]", "default": null}, "y_axis_col": {"description": "Name of the column to use for the y axis chart,\ndefaults to the y axis value set by ds.axis.", "type": "Optional[str]", "default": null}}, "raises": [], "returns": {"description": "An Altair chart.", "type": "AltairChart"}}, "tick_": {"lang": "python", "funcdef": "def tick_(\n\tself,\n\t*args,\n\t**kwargs\n) -> ChartType", "description": "Draw a square chart with numbers. Only for Altair", "long_description": null, "example": {"code": "ds.tick_()", "is_executable": false, "description": ""}, "params": {"x_axis_col": {"description": "Name of the column to use for the x axis chart,\ndefaults to the x axis value set by ds.axis.", "type": "Optional[str]", "default": null}, "y_axis_col": {"description": "Name of the column to use for the y axis chart,\ndefaults to the y axis value set by ds.axis.", "type": "Optional[str]", "default": null}}, "raises": [], "returns": {"description": "An Altair chart.", "type": "AltairChart"}}, "bar_num_": {"lang": "python", "funcdef": "def bar_num_(\n\tself,\n\t*args,\n\t**kwargs\n) -> ChartType", "description": "Draw a bar chart with numbers. Only for Altair", "long_description": null, "example": {"code": "ds.bar_num_()", "is_executable": false, "description": ""}, "params": {"x_axis_col": {"description": "Name of the column to use for the x axis chart,\ndefaults to the x axis value set by ds.axis.", "type": "Optional[str]", "default": null}, "y_axis_col": {"description": "Name of the column to use for the y axis chart,\ndefaults to the y axis value set by ds.axis.", "type": "Optional[str]", "default": null}}, "raises": [], "returns": {"description": "An Altair chart.", "type": "AltairChart"}}, "line_num_": {"lang": "python", "funcdef": "def line_num_(\n\tself,\n\t*args,\n\t**kwargs\n) -> ChartType", "description": "Draw a line chart with numbers. Only for Altair", "long_description": null, "example": {"code": "ds.line_num_()", "is_executable": false, "description": ""}, "params": {"x_axis_col": {"description": "Name of the column to use for the x axis chart,\ndefaults to the x axis value set by ds.axis.", "type": "Optional[str]", "default": null}, "y_axis_col": {"description": "Name of the column to use for the y axis chart,\ndefaults to the y axis value set by ds.axis.", "type": "Optional[str]", "default": null}}, "raises": [], "returns": {"description": "An Altair chart.", "type": "AltairChart"}}, "point_num_": {"lang": "python", "funcdef": "def point_num_(\n\tself,\n\t*args,\n\t**kwargs\n) -> ChartType", "description": "Draw a point chart with numbers. Only for Altair", "long_description": null, "example": {"code": "ds.point_num_()", "is_executable": false, "description": ""}, "params": {"x_axis_col": {"description": "Name of the column to use for the x axis chart,\ndefaults to the x axis value set by ds.axis.", "type": "Optional[str]", "default": null}, "y_axis_col": {"description": "Name of the column to use for the y axis chart,\ndefaults to the y axis value set by ds.axis.", "type": "Optional[str]", "default": null}}, "raises": [], "returns": {"description": "An Altair chart.", "type": "AltairChart"}}, "area_": {"lang": "python", "funcdef": "def area_(\n\tself,\n\t*args,\n\t**kwargs\n) -> ChartType", "description": "Draw an area chart", "long_description": null, "example": {"code": "ds.area_()", "is_executable": false, "description": ""}, "params": {"x_axis_col": {"description": "Name of the column to use for the x axis chart,\ndefaults to the x axis value set by ds.axis.", "type": "Optional[str]", "default": null}, "y_axis_col": {"description": "Name of the column to use for the y axis chart,\ndefaults to the y axis value set by ds.axis.", "type": "Optional[str]", "default": null}}, "raises": [], "returns": {"description": "A Bokeh or Altair chart.", "type": "Union[AltairChart, HvChart]"}}, "heatmap_": {"lang": "python", "funcdef": "def heatmap_(\n\tself,\n\t*args,\n\t**kwargs\n) -> ChartType", "description": "Draw a heatmap chart", "long_description": null, "example": {"code": "ds.heatmap_()", "is_executable": false, "description": ""}, "params": {"x_axis_col": {"description": "Name of the column to use for the x axis chart,\ndefaults to the x axis value set by ds.axis.", "type": "Optional[str]", "default": null}, "y_axis_col": {"description": "Name of the column to use for the y axis chart,\ndefaults to the y axis value set by ds.axis.", "type": "Optional[str]", "default": null}}, "raises": [], "returns": {"description": "A Bokeh or Altair chart.", "type": "Union[AltairChart, HvChart]"}}, "hist_": {"lang": "python", "funcdef": "def hist_(\n\tself,\n\t*args,\n\t**kwargs\n) -> ChartType", "description": "Draw a histogram chart", "long_description": null, "example": {"code": "ds.hist_()", "is_executable": false, "description": ""}, "params": {"x_axis_col": {"description": "Name of the column to use for the x axis chart,\ndefaults to the x axis value set by ds.axis.", "type": "Optional[str]", "default": null}, "y_axis_col": {"description": "Name of the column to use for the y axis chart,\ndefaults to the y axis value set by ds.axis.", "type": "Optional[str]", "default": null}}, "raises": [], "returns": {"description": "A Bokeh or Altair chart.", "type": "Union[AltairChart, HvChart]"}}, "hline_": {"lang": "python", "funcdef": "def hline_(\n\tself,\n\t*args,\n\t**kwargs\n) -> ChartType", "description": "Draw an horizontal mean line for the y axis", "long_description": null, "example": {"code": "ds.hline_()", "is_executable": false, "description": ""}, "params": {"x_axis_col": {"description": "Name of the column to use for the x axis chart,\ndefaults to the x axis value set by ds.axis.", "type": "Optional[str]", "default": null}, "y_axis_col": {"description": "Name of the column to use for the y axis chart,\ndefaults to the y axis value set by ds.axis.", "type": "Optional[str]", "default": null}}, "raises": [], "returns": {"description": "A Bokeh or Altair chart.", "type": "Union[AltairChart, HvChart]"}}, "w": {"lang": "python", "funcdef": "def w(\n\tself,\n\tv: int\n)", "description": "Set the default width of charts.", "long_description": null, "example": {"code": "# Use this method to set the default chart width to 350 pixels\nds.w(350)", "is_executable": false, "description": ""}, "params": {"v": {"description": "The width to set, in pixels.", "type": "int", "default": null}}, "raises": [], "returns": null}, "h": {"lang": "python", "funcdef": "def h(\n\tself,\n\tv: int\n)", "description": "Set the default height of charts.", "long_description": null, "example": {"code": "# Use this method to set the default chart height to 250 pixels:\nds.h(250)", "is_executable": false, "description": ""}, "params": {"v": {"description": "The height to set, in pixels.", "type": "int", "default": null}}, "raises": [], "returns": null}, "wh": {"lang": "python", "funcdef": "def wh(\n\tself,\n\tw: int,\n\th: int\n)", "description": "Set the default width and height of charts.", "long_description": null, "example": {"code": "# Use this method to set the default chart width to 500 pixels\n# and height to 200 pixels:\nds.wh(500, 200)", "is_executable": false, "description": ""}, "params": {"w": {"description": "The width to set, in pixels.", "type": "int", "default": null}, "h": {"description": "The height to set, in pixels.", "type": "int", "default": null}}, "raises": [], "returns": null}, "export_csv": {"lang": "python", "funcdef": "def export_csv(\n\tself,\n\tfilepath: str,\n\t**kwargs\n)", "description": "Write the main dataframe to a CSV file.", "long_description": null, "example": {"code": "# Use this method to write the main dataframe to \"myfile.csv\" file\nds.export_csv(\"myfile.csv\")", "is_executable": false, "description": ""}, "params": {"filepath": {"description": "Path of the file to save.", "type": "str", "default": null}, "**kwargs": {"description": "Arguments to pass to the Polars write_csv function.", "type": null, "default": null}}, "raises": [], "returns": null}, "report_path": {"lang": "python", "funcdef": "def report_path(\n\tself,\n\tpath: str\n)", "description": "Set the report path folder.", "long_description": null, "example": {"code": "# Use this method to set the report path to \"../reports\":\nds.report_path(\"../reports\")", "is_executable": false, "description": ""}, "params": {"path": {"description": "The path where to save reports, relative or absolute.", "type": "str", "default": null}}, "raises": [], "returns": null}, "stack": {"lang": "python", "funcdef": "def stack(\n\tself,\n\tchart: ChartType,\n\ttitle: Optional[str],\n\tdescription: Optional[str]\n)", "description": "Store a chart in the report stack.", "long_description": null, "example": {"code": "# Use this method to store a chart with a title and description:\nds.store_chart(chart_obj, title=\"My Chart\", description=\"This chart shows...\")", "is_executable": false, "description": ""}, "params": {"chart": {"description": "A chart object.", "type": "ChartType", "default": null}, "title": {"description": "The chart title. Defaults to None.", "type": "Optional[str]", "default": "None"}, "description": {"description": "The chart description. Defaults to None.", "type": "Optional[str]", "default": "None"}}, "raises": [], "returns": null}, "save_pdf": {"lang": "python", "funcdef": "def save_pdf(\n\tself,\n\tfilename: str,\n\tclear_stack\n)", "description": "Save a report to a PDF file.", "long_description": null, "example": {"code": "# Use this method to save a report to \"myreport.pdf\" file:\nds.save_report_to_pdf(\"myreport.pdf\")", "is_executable": false, "description": ""}, "params": {"filename": {"description": "The filename.", "type": "str", "default": null}, "clear_stack": {"description": "Clear the reporting stack. Defaults to True.", "type": "bool", "default": "True"}}, "raises": [], "returns": null}, "save_html": {"lang": "python", "funcdef": "def save_html(\n\tself,\n\tinfo,\n\tclear_stack\n)", "description": "Save a report to multiple HTML files, one per stacked item.", "long_description": null, "example": {"code": "# Use this method to save a report to multiple HTML files, with info printed\n# about the headers:\nds.save_report_to_html_files(info=True)", "is_executable": false, "description": ""}, "params": {"info": {"description": "Print info about the HTML headers. Defaults to False.", "type": "bool", "default": "False"}, "clear_stack": {"description": "Clear the reporting stack. Defaults to True.", "type": "bool", "default": "True"}}, "raises": [], "returns": null}}